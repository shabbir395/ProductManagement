package ncl.pm.model.bc.eo;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 08 22:45:51 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmAttachmentsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AtchId {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getAtchId();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setAtchId((DBSequence)value);
            }
        },
        ImId {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getImId();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setImId((Number)value);
            }
        },
        FileCode {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getFileCode();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setFileCode((Integer)value);
            }
        },
        FileName {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getFileName();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setFileName((String)value);
            }
        },
        Path {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getPath();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setPath((String)value);
            }
        },
        FileExt {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getFileExt();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setFileExt((String)value);
            }
        },
        ProgId {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getProgId();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setProgId((Number)value);
            }
        },
        XxpmItemMaster {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getXxpmItemMaster();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setXxpmItemMaster((XxpmItemMasterImpl)value);
            }
        },
        XxpmMadeupPrograms {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getXxpmMadeupPrograms();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setXxpmMadeupPrograms((XxpmMadeupProgramsImpl)value);
            }
        },
        XxpmItemMaster1 {
            public Object get(XxpmAttachmentsImpl obj) {
                return obj.getXxpmItemMaster1();
            }

            public void put(XxpmAttachmentsImpl obj, Object value) {
                obj.setXxpmItemMaster1((XxpmItemMasterImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmAttachmentsImpl object);

        public abstract void put(XxpmAttachmentsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ATCHID = AttributesEnum.AtchId.index();
    public static final int IMID = AttributesEnum.ImId.index();
    public static final int FILECODE = AttributesEnum.FileCode.index();
    public static final int FILENAME = AttributesEnum.FileName.index();
    public static final int PATH = AttributesEnum.Path.index();
    public static final int FILEEXT = AttributesEnum.FileExt.index();
    public static final int PROGID = AttributesEnum.ProgId.index();
    public static final int XXPMITEMMASTER =
        AttributesEnum.XxpmItemMaster.index();
    public static final int XXPMMADEUPPROGRAMS =
        AttributesEnum.XxpmMadeupPrograms.index();
    public static final int XXPMITEMMASTER1 =
        AttributesEnum.XxpmItemMaster1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmAttachmentsImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmAttachments");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for AtchId, using the alias name AtchId.
     * @return the AtchId
     */
    public DBSequence getAtchId() {
        return (DBSequence)getAttributeInternal(ATCHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AtchId.
     * @param value value to set the AtchId
     */
    public void setAtchId(DBSequence value) {
        setAttributeInternal(ATCHID, value);
    }

    /**
     * Gets the attribute value for ImId, using the alias name ImId.
     * @return the ImId
     */
    public Number getImId() {
        return (Number)getAttributeInternal(IMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImId.
     * @param value value to set the ImId
     */
    public void setImId(Number value) {
        setAttributeInternal(IMID, value);
    }

    /**
     * Gets the attribute value for FileCode, using the alias name FileCode.
     * @return the FileCode
     */
    public Integer getFileCode() {
        return (Integer)getAttributeInternal(FILECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileCode.
     * @param value value to set the FileCode
     */
    public void setFileCode(Integer value) {
        setAttributeInternal(FILECODE, value);
    }

    /**
     * Gets the attribute value for FileName, using the alias name FileName.
     * @return the FileName
     */
    public String getFileName() {
        return (String)getAttributeInternal(FILENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileName.
     * @param value value to set the FileName
     */
    public void setFileName(String value) {
        setAttributeInternal(FILENAME, value);
    }

    /**
     * Gets the attribute value for Path, using the alias name Path.
     * @return the Path
     */
    public String getPath() {
        return (String)getAttributeInternal(PATH);
    }

    /**
     * Sets <code>value</code> as the attribute value for Path.
     * @param value value to set the Path
     */
    public void setPath(String value) {
        setAttributeInternal(PATH, value);
    }

    /**
     * Gets the attribute value for FileExt, using the alias name FileExt.
     * @return the FileExt
     */
    public String getFileExt() {
        return (String)getAttributeInternal(FILEEXT);
    }

    /**
     * Sets <code>value</code> as the attribute value for FileExt.
     * @param value value to set the FileExt
     */
    public void setFileExt(String value) {
        setAttributeInternal(FILEEXT, value);
    }

    /**
     * Gets the attribute value for ProgId, using the alias name ProgId.
     * @return the ProgId
     */
    public Number getProgId() {
        return (Number)getAttributeInternal(PROGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProgId.
     * @param value value to set the ProgId
     */
    public void setProgId(Number value) {
        setAttributeInternal(PROGID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxpmItemMasterImpl.
     */
    public XxpmItemMasterImpl getXxpmItemMaster() {
        return (XxpmItemMasterImpl)getAttributeInternal(XXPMITEMMASTER);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmItemMasterImpl.
     */
    public void setXxpmItemMaster(XxpmItemMasterImpl value) {
        setAttributeInternal(XXPMITEMMASTER, value);
    }

    /**
     * @return the associated entity XxpmMadeupProgramsImpl.
     */
    public XxpmMadeupProgramsImpl getXxpmMadeupPrograms() {
        return (XxpmMadeupProgramsImpl)getAttributeInternal(XXPMMADEUPPROGRAMS);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupProgramsImpl.
     */
    public void setXxpmMadeupPrograms(XxpmMadeupProgramsImpl value) {
        setAttributeInternal(XXPMMADEUPPROGRAMS, value);
    }


    /**
     * @return the associated entity XxpmItemMasterImpl.
     */
    public XxpmItemMasterImpl getXxpmItemMaster1() {
        return (XxpmItemMasterImpl)getAttributeInternal(XXPMITEMMASTER1);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmItemMasterImpl.
     */
    public void setXxpmItemMaster1(XxpmItemMasterImpl value) {
        setAttributeInternal(XXPMITEMMASTER1, value);
    }

    /**
     * @param atchId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence atchId) {
        return new Key(new Object[] { atchId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);

            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try {
            super.doDML(operation, e);
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmAttachmentsImpl. Class: " + e1.getClass());
            return;
        }
    }

    ModelActions ma = new ModelActions();

    @Override
    public void postChanges(TransactionEvent e) {
        if (this.getPostState() == STATUS_NEW ||
            this.getPostState() == STATUS_MODIFIED) {
            XxpmItemMasterImpl item = this.getXxpmItemMaster();
            if (item != null) {
                item.postChanges(e);
            }
            XxpmMadeupProgramsImpl program = this.getXxpmMadeupPrograms();
            if (program != null) {
                program.postChanges(e);
            }
        }
        super.postChanges(e);
    }
}
