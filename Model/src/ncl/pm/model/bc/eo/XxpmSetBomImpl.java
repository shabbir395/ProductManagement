package ncl.pm.model.bc.eo;

import java.util.Calendar;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 21 14:34:01 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmSetBomImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SetBomId,
        ProgId,
        SetId,
        BomNumber,
        FolderCode,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        RespId,
        LastUpdateDate,
        BomLog,
        EbsStatus,
        XxpmSetBomArticles,
        XxpmSetBomAccessories,
        FndUser,
        XxpmMadeupSets,
        XxpmMadeupPrograms,
        XxpmMadeupPrograms1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;


        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int FNDUSER1 = AttributesEnum.FndUser.index();

    public static final int XXPMMADEUPSETS1 =
        AttributesEnum.XxpmMadeupSets.index();

    public static final int SETBOMID = AttributesEnum.SetBomId.index();
    public static final int PROGID = AttributesEnum.ProgId.index();
    public static final int SETID = AttributesEnum.SetId.index();
    public static final int BOMNUMBER = AttributesEnum.BomNumber.index();
    public static final int FOLDERCODE = AttributesEnum.FolderCode.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY =
        AttributesEnum.LastUpdatedBy.index();
    public static final int RESPID = AttributesEnum.RespId.index();
    public static final int LASTUPDATEDATE =
        AttributesEnum.LastUpdateDate.index();
    public static final int BOMLOG = AttributesEnum.BomLog.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int XXPMSETBOMARTICLES =
        AttributesEnum.XxpmSetBomArticles.index();
    public static final int XXPMSETBOMACCESSORIES =
        AttributesEnum.XxpmSetBomAccessories.index();
    public static final int FNDUSER = AttributesEnum.FndUser.index();
    public static final int XXPMMADEUPSETS =
        AttributesEnum.XxpmMadeupSets.index();
    public static final int XXPMMADEUPPROGRAMS =
        AttributesEnum.XxpmMadeupPrograms.index();
    public static final int XXPMMADEUPPROGRAMS1 =
        AttributesEnum.XxpmMadeupPrograms1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmSetBomImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmSetBom");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for SetBomId, using the alias name SetBomId.
     * @return the SetBomId
     */
    public DBSequence getSetBomId() {
        return (DBSequence)getAttributeInternal(SETBOMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SetBomId.
     * @param value value to set the SetBomId
     */
    public void setSetBomId(DBSequence value) {
        setAttributeInternal(SETBOMID, value);
    }

    /**
     * Gets the attribute value for ProgId, using the alias name ProgId.
     * @return the ProgId
     */
    public Integer getProgId() {
        return (Integer)getAttributeInternal(PROGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProgId.
     * @param value value to set the ProgId
     */
    public void setProgId(Integer value) {
        setAttributeInternal(PROGID, value);
    }

    /**
     * Gets the attribute value for SetId, using the alias name SetId.
     * @return the SetId
     */
    public Integer getSetId() {
        return (Integer)getAttributeInternal(SETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SetId.
     * @param value value to set the SetId
     */
    public void setSetId(Integer value) {
        setAttributeInternal(SETID, value);
    }

    /**
     * Gets the attribute value for BomNumber, using the alias name BomNumber.
     * @return the BomNumber
     */
    public String getBomNumber() {
        return (String)getAttributeInternal(BOMNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for BomNumber.
     * @param value value to set the BomNumber
     */
    public void setBomNumber(String value) {
        setAttributeInternal(BOMNUMBER, value);
    }

    /**
     * Gets the attribute value for FolderCode, using the alias name FolderCode.
     * @return the FolderCode
     */
    public Number getFolderCode() {
        return (Number)getAttributeInternal(FOLDERCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FolderCode.
     * @param value value to set the FolderCode
     */
    public void setFolderCode(Number value) {
        setAttributeInternal(FOLDERCODE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }


    /**
     * Gets the attribute value for RespId, using the alias name RespId.
     * @return the RespId
     */
    public String getRespId() {
        return (String)getAttributeInternal(RESPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RespId.
     * @param value value to set the RespId
     */
    public void setRespId(String value) {
        setAttributeInternal(RESPID, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for BomLog, using the alias name BomLog.
     * @return the BomLog
     */
    public String getBomLog() {
        return (String)getAttributeInternal(BOMLOG);
    }

    /**
     * Sets <code>value</code> as the attribute value for BomLog.
     * @param value value to set the BomLog
     */
    public void setBomLog(String value) {
        setAttributeInternal(BOMLOG, value);
    }

    /**
     * Gets the attribute value for EbsStatus, using the alias name EbsStatus.
     * @return the EbsStatus
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EbsStatus.
     * @param value value to set the EbsStatus
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxpmSetBomArticles() {
        return (RowIterator)getAttributeInternal(XXPMSETBOMARTICLES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxpmSetBomAccessories() {
        return (RowIterator)getAttributeInternal(XXPMSETBOMACCESSORIES);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getFndUser() {
        return (EntityImpl)getAttributeInternal(FNDUSER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setFndUser(EntityImpl value) {
        setAttributeInternal(FNDUSER, value);
    }

    /**
     * @return the associated entity XxpmMadeupSetsImpl.
     */
    public XxpmMadeupSetsImpl getXxpmMadeupSets() {
        return (XxpmMadeupSetsImpl)getAttributeInternal(XXPMMADEUPSETS);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupSetsImpl.
     */
    public void setXxpmMadeupSets(XxpmMadeupSetsImpl value) {
        setAttributeInternal(XXPMMADEUPSETS, value);
    }

    /**
     * @return the associated entity XxpmMadeupProgramsImpl.
     */
    public XxpmMadeupProgramsImpl getXxpmMadeupPrograms1() {
        return (XxpmMadeupProgramsImpl)getAttributeInternal(XXPMMADEUPPROGRAMS1);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupProgramsImpl.
     */
    public void setXxpmMadeupPrograms1(XxpmMadeupProgramsImpl value) {
        setAttributeInternal(XXPMMADEUPPROGRAMS1, value);
    }

    /**
     * @param setBomId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence setBomId) {
        return new Key(new Object[] { setBomId });
    }

    /**
     * @return the associated entity XxpmMadeupSetsImpl.
     */
    public XxpmMadeupSetsImpl getXxpmMadeupSets1() {
        return (XxpmMadeupSetsImpl)getAttributeInternal(XXPMMADEUPSETS1);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupSetsImpl.
     */
    public void setXxpmMadeupSets1(XxpmMadeupSetsImpl value) {
        setAttributeInternal(XXPMMADEUPSETS1, value);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getFndUser1() {
        return (EntityImpl)getAttributeInternal(FNDUSER1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setFndUser1(EntityImpl value) {
        setAttributeInternal(FNDUSER1, value);
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);

            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            this.setLastUpdatedBy((String)ADFContext.getCurrent().getSessionScope().get("userID"));
            this.setRespId((String)ADFContext.getCurrent().getSessionScope().get("respID"));
            this.setLastUpdateDate(new oracle.jbo.domain.Date(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis())));
        }

        if (operation == DML_INSERT) {
            setBomNumber(ma.getMaxSetBomNum(getDBTransaction(),
                                            String.valueOf(getProgId())));
        }

        try {
            ADFContext.getCurrent().getSessionScope().put("setBomCreationMsg",
                                                          null);
            super.doDML(operation, e);
            if (operation == DML_INSERT || operation == DML_UPDATE) {
                ADFContext.getCurrent().getSessionScope().put("setBomCreationMsg",
                                                              "Bom has been saved successfully.");
            }
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmArticleBomImpl. Class: " + e1.getClass());
            return;
        }
    }
    ModelActions ma = new ModelActions();
}
