package ncl.pm.model.bc.eo;

import java.math.BigDecimal;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 15 15:13:29 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmPoLinesImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PoLineId {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getPoLineId();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setPoLineId((DBSequence)value);
            }
        },
        PoHeaderId {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getPoHeaderId();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setPoHeaderId((Integer)value);
            }
        },
        InventoryItemId {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getInventoryItemId();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setInventoryItemId((Integer)value);
            }
        },
        AccCat {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getAccCat();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setAccCat((String)value);
            }
        },
        SoLineQty {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getSoLineQty();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setSoLineQty((Integer)value);
            }
        },
        SoLineRate {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getSoLineRate();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setSoLineRate((BigDecimal)value);
            }
        },
        CurrencyCode {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getCurrencyCode();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setCurrencyCode((String)value);
            }
        },
        Consumption {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getConsumption();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setConsumption((BigDecimal)value);
            }
        },
        ItmStock {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getItmStock();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setItmStock((BigDecimal)value);
            }
        },
        ActOrderedQty {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getActOrderedQty();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setActOrderedQty((Double)value);
            }
        },
        Moq {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getMoq();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setMoq((Integer)value);
            }
        },
        VendorId {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getVendorId();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setVendorId((Integer)value);
            }
        },
        ItemType {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getItemType();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setItemType((Integer)value);
            }
        },
        EbsStatus {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getEbsStatus();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setEbsStatus((Integer)value);
            }
        },
        VendorSiteId {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getVendorSiteId();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setVendorSiteId((Integer)value);
            }
        },
        XxpmPoHeader {
            public Object get(XxpmPoLinesImpl obj) {
                return obj.getXxpmPoHeader();
            }

            public void put(XxpmPoLinesImpl obj, Object value) {
                obj.setXxpmPoHeader((XxpmPoHeaderImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmPoLinesImpl object);

        public abstract void put(XxpmPoLinesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int POLINEID = AttributesEnum.PoLineId.index();
    public static final int POHEADERID = AttributesEnum.PoHeaderId.index();
    public static final int INVENTORYITEMID =
        AttributesEnum.InventoryItemId.index();
    public static final int ACCCAT = AttributesEnum.AccCat.index();
    public static final int SOLINEQTY = AttributesEnum.SoLineQty.index();
    public static final int SOLINERATE = AttributesEnum.SoLineRate.index();
    public static final int CURRENCYCODE = AttributesEnum.CurrencyCode.index();
    public static final int CONSUMPTION = AttributesEnum.Consumption.index();
    public static final int ITMSTOCK = AttributesEnum.ItmStock.index();
    public static final int ACTORDEREDQTY =
        AttributesEnum.ActOrderedQty.index();
    public static final int MOQ = AttributesEnum.Moq.index();
    public static final int VENDORID = AttributesEnum.VendorId.index();
    public static final int ITEMTYPE = AttributesEnum.ItemType.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int VENDORSITEID = AttributesEnum.VendorSiteId.index();
    public static final int XXPMPOHEADER = AttributesEnum.XxpmPoHeader.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmPoLinesImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmPoLines");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for PoLineId, using the alias name PoLineId.
     * @return the PoLineId
     */
    public DBSequence getPoLineId() {
        return (DBSequence)getAttributeInternal(POLINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PoLineId.
     * @param value value to set the PoLineId
     */
    public void setPoLineId(DBSequence value) {
        setAttributeInternal(POLINEID, value);
    }

    /**
     * Gets the attribute value for PoHeaderId, using the alias name PoHeaderId.
     * @return the PoHeaderId
     */
    public Integer getPoHeaderId() {
        return (Integer)getAttributeInternal(POHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PoHeaderId.
     * @param value value to set the PoHeaderId
     */
    public void setPoHeaderId(Integer value) {
        setAttributeInternal(POHEADERID, value);
    }

    /**
     * Gets the attribute value for InventoryItemId, using the alias name InventoryItemId.
     * @return the InventoryItemId
     */
    public Integer getInventoryItemId() {
        return (Integer)getAttributeInternal(INVENTORYITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for InventoryItemId.
     * @param value value to set the InventoryItemId
     */
    public void setInventoryItemId(Integer value) {
        setAttributeInternal(INVENTORYITEMID, value);
    }

    /**
     * Gets the attribute value for SoLineQty, using the alias name SoLineQty.
     * @return the SoLineQty
     */
    public Integer getSoLineQty() {
        return (Integer)getAttributeInternal(SOLINEQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoLineQty.
     * @param value value to set the SoLineQty
     */
    public void setSoLineQty(Integer value) {
        setAttributeInternal(SOLINEQTY, value);
    }

    /**
     * Gets the attribute value for SoLineRate, using the alias name SoLineRate.
     * @return the SoLineRate
     */
    public BigDecimal getSoLineRate() {
        return (BigDecimal)getAttributeInternal(SOLINERATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoLineRate.
     * @param value value to set the SoLineRate
     */
    public void setSoLineRate(BigDecimal value) {
        setAttributeInternal(SOLINERATE, value);
    }


    /**
     * Gets the attribute value for Consumption, using the alias name Consumption.
     * @return the Consumption
     */
    public BigDecimal getConsumption() {
        return (BigDecimal)getAttributeInternal(CONSUMPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Consumption.
     * @param value value to set the Consumption
     */
    public void setConsumption(BigDecimal value) {
        setAttributeInternal(CONSUMPTION, value);
    }

    /**
     * Gets the attribute value for Moq, using the alias name Moq.
     * @return the Moq
     */
    public Integer getMoq() {
        return (Integer)getAttributeInternal(MOQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for Moq.
     * @param value value to set the Moq
     */
    public void setMoq(Integer value) {
        setAttributeInternal(MOQ, value);
    }

    /**
     * Gets the attribute value for VendorId, using the alias name VendorId.
     * @return the VendorId
     */
    public Integer getVendorId() {
        return (Integer)getAttributeInternal(VENDORID);
    }

    /**
     * Sets <code>value</code> as the attribute value for VendorId.
     * @param value value to set the VendorId
     */
    public void setVendorId(Integer value) {
        setAttributeInternal(VENDORID, value);
    }

    /**
     * Gets the attribute value for ItemType, using the alias name ItemType.
     * @return the ItemType
     */
    public Integer getItemType() {
        return (Integer)getAttributeInternal(ITEMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemType.
     * @param value value to set the ItemType
     */
    public void setItemType(Integer value) {
        setAttributeInternal(ITEMTYPE, value);
    }

    /**
     * Gets the attribute value for EbsStatus, using the alias name EbsStatus.
     * @return the EbsStatus
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EbsStatus.
     * @param value value to set the EbsStatus
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }

    /**
     * Gets the attribute value for VendorSiteId, using the alias name VendorSiteId.
     * @return the VendorSiteId
     */
    public Integer getVendorSiteId() {
        return (Integer)getAttributeInternal(VENDORSITEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for VendorSiteId.
     * @param value value to set the VendorSiteId
     */
    public void setVendorSiteId(Integer value) {
        setAttributeInternal(VENDORSITEID, value);
    }

    /**
     * Gets the attribute value for CurrencyCode, using the alias name CurrencyCode.
     * @return the CurrencyCode
     */
    public String getCurrencyCode() {
        return (String)getAttributeInternal(CURRENCYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrencyCode.
     * @param value value to set the CurrencyCode
     */
    public void setCurrencyCode(String value) {
        setAttributeInternal(CURRENCYCODE, value);
    }

    /**
     * Gets the attribute value for AccCat, using the alias name AccCat.
     * @return the AccCat
     */
    public String getAccCat() {
        return (String)getAttributeInternal(ACCCAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccCat.
     * @param value value to set the AccCat
     */
    public void setAccCat(String value) {
        setAttributeInternal(ACCCAT, value);
    }

    /**
     * Gets the attribute value for ItmStock, using the alias name ItmStock.
     * @return the ItmStock
     */
    public BigDecimal getItmStock() {
        return (BigDecimal)getAttributeInternal(ITMSTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmStock.
     * @param value value to set the ItmStock
     */
    public void setItmStock(BigDecimal value) {
        setAttributeInternal(ITMSTOCK, value);
    }

    /**
     * Gets the attribute value for ActOrderedQty, using the alias name ActOrderedQty.
     * @return the ActOrderedQty
     */
    public Double getActOrderedQty() {
        return (Double)getAttributeInternal(ACTORDEREDQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActOrderedQty.
     * @param value value to set the ActOrderedQty
     */
    public void setActOrderedQty(Double value) {
        setAttributeInternal(ACTORDEREDQTY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxpmPoHeaderImpl.
     */
    public XxpmPoHeaderImpl getXxpmPoHeader() {
        return (XxpmPoHeaderImpl)getAttributeInternal(XXPMPOHEADER);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmPoHeaderImpl.
     */
    public void setXxpmPoHeader(XxpmPoHeaderImpl value) {
        setAttributeInternal(XXPMPOHEADER, value);
    }


    /**
     * @param poLineId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence poLineId) {
        return new Key(new Object[] { poLineId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);

            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try {
            super.doDML(operation, e);
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmPoLinesImpl. Class: " + e1.getClass());
            return;
        }
    }
    ModelActions ma = new ModelActions();
}
