package ncl.pm.model.bc.eo;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 29 18:29:18 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmMadeupArticlesImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ArticleId {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getArticleId();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setArticleId((DBSequence)value);
            }
        },
        ProgId {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getProgId();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setProgId((Number)value);
            }
        },
        ArticleName {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getArticleName();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setArticleName((String)value);
            }
        },
        HemDetails {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getHemDetails();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setHemDetails((String)value);
            }
        },
        Embroided {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getEmbroided();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setEmbroided((String)value);
            }
        },
        EmbroideryDetails {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getEmbroideryDetails();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setEmbroideryDetails((String)value);
            }
        },
        Quilted {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getQuilted();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setQuilted((String)value);
            }
        },
        QuiltDesign {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getQuiltDesign();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setQuiltDesign((String)value);
            }
        },
        QuiltType {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getQuiltType();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setQuiltType((String)value);
            }
        },
        OpenStock {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getOpenStock();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setOpenStock((String)value);
            }
        },
        SetArticle {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getSetArticle();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setSetArticle((String)value);
            }
        },
        Finished {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getFinished();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setFinished((String)value);
            }
        },
        Quantity {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getQuantity();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setQuantity((Number)value);
            }
        },
        BomGroup {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getBomGroup();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setBomGroup((String)value);
            }
        },
        SpecialInstructions {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getSpecialInstructions();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setSpecialInstructions((String)value);
            }
        },
        EbsStatus {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getEbsStatus();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setEbsStatus((Integer)value);
            }
        },
        XxpmMadeupCombinations {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getXxpmMadeupCombinations();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        XxpmMadeupDimensions {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getXxpmMadeupDimensions();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        XxpmMadeupPrograms {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getXxpmMadeupPrograms();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setXxpmMadeupPrograms((XxpmMadeupProgramsImpl)value);
            }
        },
        XxpmMadeupSetArticles {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getXxpmMadeupSetArticles();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        XxpmArticleBom {
            public Object get(XxpmMadeupArticlesImpl obj) {
                return obj.getXxpmArticleBom();
            }

            public void put(XxpmMadeupArticlesImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmMadeupArticlesImpl object);

        public abstract void put(XxpmMadeupArticlesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ARTICLEID = AttributesEnum.ArticleId.index();
    public static final int PROGID = AttributesEnum.ProgId.index();
    public static final int ARTICLENAME = AttributesEnum.ArticleName.index();
    public static final int HEMDETAILS = AttributesEnum.HemDetails.index();
    public static final int EMBROIDED = AttributesEnum.Embroided.index();
    public static final int EMBROIDERYDETAILS =
        AttributesEnum.EmbroideryDetails.index();
    public static final int QUILTED = AttributesEnum.Quilted.index();
    public static final int QUILTDESIGN = AttributesEnum.QuiltDesign.index();
    public static final int QUILTTYPE = AttributesEnum.QuiltType.index();
    public static final int OPENSTOCK = AttributesEnum.OpenStock.index();
    public static final int SETARTICLE = AttributesEnum.SetArticle.index();
    public static final int FINISHED = AttributesEnum.Finished.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int BOMGROUP = AttributesEnum.BomGroup.index();
    public static final int SPECIALINSTRUCTIONS =
        AttributesEnum.SpecialInstructions.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int XXPMMADEUPCOMBINATIONS =
        AttributesEnum.XxpmMadeupCombinations.index();
    public static final int XXPMMADEUPDIMENSIONS =
        AttributesEnum.XxpmMadeupDimensions.index();
    public static final int XXPMMADEUPPROGRAMS =
        AttributesEnum.XxpmMadeupPrograms.index();
    public static final int XXPMMADEUPSETARTICLES =
        AttributesEnum.XxpmMadeupSetArticles.index();
    public static final int XXPMARTICLEBOM =
        AttributesEnum.XxpmArticleBom.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmMadeupArticlesImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmMadeupArticles");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for ArticleId, using the alias name ArticleId.
     * @return the ArticleId
     */
    public DBSequence getArticleId() {
        return (DBSequence)getAttributeInternal(ARTICLEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArticleId.
     * @param value value to set the ArticleId
     */
    public void setArticleId(DBSequence value) {
        setAttributeInternal(ARTICLEID, value);
    }

    /**
     * Gets the attribute value for ProgId, using the alias name ProgId.
     * @return the ProgId
     */
    public Number getProgId() {
        return (Number)getAttributeInternal(PROGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProgId.
     * @param value value to set the ProgId
     */
    public void setProgId(Number value) {
        setAttributeInternal(PROGID, value);
    }

    /**
     * Gets the attribute value for ArticleNameMaster, using the alias name ArticleNameMaster.
     * @return the ArticleNameMaster
     */
    public String getArticleName() {
        return (String)getAttributeInternal(ARTICLENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArticleNameMaster.
     * @param value value to set the ArticleNameMaster
     */
    public void setArticleName(String value) {
        setAttributeInternal(ARTICLENAME, value);
    }

    /**
     * Gets the attribute value for HemDetails, using the alias name HemDetails.
     * @return the HemDetails
     */
    public String getHemDetails() {
        return (String)getAttributeInternal(HEMDETAILS);
    }

    /**
     * Sets <code>value</code> as the attribute value for HemDetails.
     * @param value value to set the HemDetails
     */
    public void setHemDetails(String value) {
        setAttributeInternal(HEMDETAILS, value);
    }

    /**
     * Gets the attribute value for Embroided, using the alias name Embroided.
     * @return the Embroided
     */
    public String getEmbroided() {
        return (String)getAttributeInternal(EMBROIDED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Embroided.
     * @param value value to set the Embroided
     */
    public void setEmbroided(String value) {
        setAttributeInternal(EMBROIDED, value);
    }

    /**
     * Gets the attribute value for EmbroideryDetails, using the alias name EmbroideryDetails.
     * @return the EmbroideryDetails
     */
    public String getEmbroideryDetails() {
        return (String)getAttributeInternal(EMBROIDERYDETAILS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmbroideryDetails.
     * @param value value to set the EmbroideryDetails
     */
    public void setEmbroideryDetails(String value) {
        setAttributeInternal(EMBROIDERYDETAILS, value);
    }

    /**
     * Gets the attribute value for Quilted, using the alias name Quilted.
     * @return the Quilted
     */
    public String getQuilted() {
        return (String)getAttributeInternal(QUILTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quilted.
     * @param value value to set the Quilted
     */
    public void setQuilted(String value) {
        setAttributeInternal(QUILTED, value);
    }

    /**
     * Gets the attribute value for QuiltDesign, using the alias name QuiltDesign.
     * @return the QuiltDesign
     */
    public String getQuiltDesign() {
        return (String)getAttributeInternal(QUILTDESIGN);
    }

    /**
     * Sets <code>value</code> as the attribute value for QuiltDesign.
     * @param value value to set the QuiltDesign
     */
    public void setQuiltDesign(String value) {
        setAttributeInternal(QUILTDESIGN, value);
    }

    /**
     * Gets the attribute value for QuiltType, using the alias name QuiltType.
     * @return the QuiltType
     */
    public String getQuiltType() {
        return (String)getAttributeInternal(QUILTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for QuiltType.
     * @param value value to set the QuiltType
     */
    public void setQuiltType(String value) {
        setAttributeInternal(QUILTTYPE, value);
    }

    /**
     * Gets the attribute value for OpenStock, using the alias name OpenStock.
     * @return the OpenStock
     */
    public String getOpenStock() {
        return (String)getAttributeInternal(OPENSTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for OpenStock.
     * @param value value to set the OpenStock
     */
    public void setOpenStock(String value) {
        setAttributeInternal(OPENSTOCK, value);
    }

    /**
     * Gets the attribute value for SetArticle, using the alias name SetArticle.
     * @return the SetArticle
     */
    public String getSetArticle() {
        return (String)getAttributeInternal(SETARTICLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SetArticle.
     * @param value value to set the SetArticle
     */
    public void setSetArticle(String value) {
        setAttributeInternal(SETARTICLE, value);
    }

    /**
     * Gets the attribute value for Finished, using the alias name Finished.
     * @return the Finished
     */
    public String getFinished() {
        return (String)getAttributeInternal(FINISHED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Finished.
     * @param value value to set the Finished
     */
    public void setFinished(String value) {
        setAttributeInternal(FINISHED, value);
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the Quantity
     */
    public Number getQuantity() {
        return (Number)getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(Number value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for BomGroup, using the alias name BomGroup.
     * @return the BomGroup
     */
    public String getBomGroup() {
        return (String)getAttributeInternal(BOMGROUP);
    }

    /**
     * Sets <code>value</code> as the attribute value for BomGroup.
     * @param value value to set the BomGroup
     */
    public void setBomGroup(String value) {
        setAttributeInternal(BOMGROUP, value);
    }

    /**
     * Gets the attribute value for SpecialInstructions, using the alias name SpecialInstructions.
     * @return the SpecialInstructions
     */
    public String getSpecialInstructions() {
        return (String)getAttributeInternal(SPECIALINSTRUCTIONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for SpecialInstructions.
     * @param value value to set the SpecialInstructions
     */
    public void setSpecialInstructions(String value) {
        setAttributeInternal(SPECIALINSTRUCTIONS, value);
    }

    /**
     * Gets the attribute value for EbsStatus, using the alias name EbsStatus.
     * @return the EbsStatus
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EbsStatus.
     * @param value value to set the EbsStatus
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxpmMadeupCombinations() {
        return (RowIterator)getAttributeInternal(XXPMMADEUPCOMBINATIONS);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxpmMadeupDimensions() {
        return (RowIterator)getAttributeInternal(XXPMMADEUPDIMENSIONS);
    }

    /**
     * @return the associated entity XxpmMadeupProgramsImpl.
     */
    public XxpmMadeupProgramsImpl getXxpmMadeupPrograms() {
        return (XxpmMadeupProgramsImpl)getAttributeInternal(XXPMMADEUPPROGRAMS);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupProgramsImpl.
     */
    public void setXxpmMadeupPrograms(XxpmMadeupProgramsImpl value) {
        setAttributeInternal(XXPMMADEUPPROGRAMS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxpmMadeupSetArticles() {
        return (RowIterator)getAttributeInternal(XXPMMADEUPSETARTICLES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxpmArticleBom() {
        return (RowIterator)getAttributeInternal(XXPMARTICLEBOM);
    }


    /**
     * @param articleId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence articleId) {
        return new Key(new Object[] { articleId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);

            super.lock();
        }
    }

    @Override
    public void postChanges(TransactionEvent e) {
        if (this.getPostState() == STATUS_NEW ||
            this.getPostState() == STATUS_MODIFIED) {
            XxpmMadeupProgramsImpl program = this.getXxpmMadeupPrograms();
            if (program != null) {
                program.postChanges(e);
            }
        }
        super.postChanges(e);
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try {
            super.doDML(operation, e);
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmMadeupArticlesImpl. Class: " + e1.getClass());
            return;
        }
    }
    ModelActions ma = new ModelActions();
}
