package ncl.pm.model.bc.eo;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 04 11:30:22 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmSetBomArticlesImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        BomArticleId {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getBomArticleId();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setBomArticleId((DBSequence)value);
            }
        },
        SetBomId {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getSetBomId();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setSetBomId((Number)value);
            }
        },
        SubInventory {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getSubInventory();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setSubInventory((String)value);
            }
        },
        CombId {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getCombId();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setCombId((Integer)value);
            }
        },
        Active {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getActive();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setActive((Integer)value);
            }
        },
        EbsStatus {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getEbsStatus();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setEbsStatus((Integer)value);
            }
        },
        XxpmSetBom {
            public Object get(XxpmSetBomArticlesImpl obj) {
                return obj.getXxpmSetBom();
            }

            public void put(XxpmSetBomArticlesImpl obj, Object value) {
                obj.setXxpmSetBom((XxpmSetBomImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmSetBomArticlesImpl object);

        public abstract void put(XxpmSetBomArticlesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int BOMARTICLEID = AttributesEnum.BomArticleId.index();
    public static final int SETBOMID = AttributesEnum.SetBomId.index();
    public static final int SUBINVENTORY = AttributesEnum.SubInventory.index();
    public static final int COMBID = AttributesEnum.CombId.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int XXPMSETBOM = AttributesEnum.XxpmSetBom.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmSetBomArticlesImpl() {
    }

    /**
     * Gets the attribute value for BomArticleId, using the alias name BomArticleId.
     * @return the BomArticleId
     */
    public DBSequence getBomArticleId() {
        return (DBSequence)getAttributeInternal(BOMARTICLEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BomArticleId.
     * @param value value to set the BomArticleId
     */
    public void setBomArticleId(DBSequence value) {
        setAttributeInternal(BOMARTICLEID, value);
    }

    /**
     * Gets the attribute value for SetBomId, using the alias name SetBomId.
     * @return the SetBomId
     */
    public Number getSetBomId() {
        return (Number)getAttributeInternal(SETBOMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SetBomId.
     * @param value value to set the SetBomId
     */
    public void setSetBomId(Number value) {
        setAttributeInternal(SETBOMID, value);
    }

    /**
     * Gets the attribute value for SubInventory, using the alias name SubInventory.
     * @return the SubInventory
     */
    public String getSubInventory() {
        return (String)getAttributeInternal(SUBINVENTORY);
    }

    /**
     * Sets <code>value</code> as the attribute value for SubInventory.
     * @param value value to set the SubInventory
     */
    public void setSubInventory(String value) {
        setAttributeInternal(SUBINVENTORY, value);
    }

    /**
     * Gets the attribute value for CombId, using the alias name CombId.
     * @return the CombId
     */
    public Integer getCombId() {
        return (Integer)getAttributeInternal(COMBID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CombId.
     * @param value value to set the CombId
     */
    public void setCombId(Integer value) {
        setAttributeInternal(COMBID, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the Active
     */
    public Integer getActive() {
        return (Integer)getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(Integer value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for EbsStatus, using the alias name EbsStatus.
     * @return the EbsStatus
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EbsStatus.
     * @param value value to set the EbsStatus
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxpmSetBomImpl.
     */
    public XxpmSetBomImpl getXxpmSetBom() {
        return (XxpmSetBomImpl)getAttributeInternal(XXPMSETBOM);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmSetBomImpl.
     */
    public void setXxpmSetBom(XxpmSetBomImpl value) {
        setAttributeInternal(XXPMSETBOM, value);
    }

    /**
     * @param bomArticleId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence bomArticleId) {
        return new Key(new Object[] { bomArticleId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmSetBomArticles");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try {
            ADFContext.getCurrent().getSessionScope().put("setBomCreationMsg",
                                                          null);
            super.doDML(operation, e);
            if (operation == DML_INSERT || operation == DML_UPDATE) {
                ADFContext.getCurrent().getSessionScope().put("setBomCreationMsg",
                                                              "Bom has been saved successfully.");
            }
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmArticleBomImpl. Class: " + e1.getClass());
            return;
        }
    }
    ModelActions ma = new ModelActions();
}
