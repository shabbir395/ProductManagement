package ncl.pm.model.bc.eo;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 29 18:39:42 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmMadeupSetArticlesImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SetArticleId {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getSetArticleId();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setSetArticleId((DBSequence)value);
            }
        },
        SetId {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getSetId();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setSetId((Number)value);
            }
        },
        ArticleId {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getArticleId();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setArticleId((Number)value);
            }
        },
        Quantity {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getQuantity();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setQuantity((Number)value);
            }
        },
        EbsStatus {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getEbsStatus();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setEbsStatus((Integer)value);
            }
        },
        XxpmMadeupSets {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getXxpmMadeupSets();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setXxpmMadeupSets((XxpmMadeupSetsImpl)value);
            }
        },
        XxpmMadeupArticles {
            public Object get(XxpmMadeupSetArticlesImpl obj) {
                return obj.getXxpmMadeupArticles();
            }

            public void put(XxpmMadeupSetArticlesImpl obj, Object value) {
                obj.setXxpmMadeupArticles((XxpmMadeupArticlesImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmMadeupSetArticlesImpl object);

        public abstract void put(XxpmMadeupSetArticlesImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int SETARTICLEID = AttributesEnum.SetArticleId.index();
    public static final int SETID = AttributesEnum.SetId.index();
    public static final int ARTICLEID = AttributesEnum.ArticleId.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int XXPMMADEUPSETS =
        AttributesEnum.XxpmMadeupSets.index();
    public static final int XXPMMADEUPARTICLES =
        AttributesEnum.XxpmMadeupArticles.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmMadeupSetArticlesImpl() {
    }

    /**
     * Gets the attribute value for SetArticleId, using the alias name SetArticleId.
     * @return the SetArticleId
     */
    public DBSequence getSetArticleId() {
        return (DBSequence)getAttributeInternal(SETARTICLEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SetArticleId.
     * @param value value to set the SetArticleId
     */
    public void setSetArticleId(DBSequence value) {
        setAttributeInternal(SETARTICLEID, value);
    }

    /**
     * Gets the attribute value for SetId, using the alias name SetId.
     * @return the SetId
     */
    public Number getSetId() {
        return (Number)getAttributeInternal(SETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SetId.
     * @param value value to set the SetId
     */
    public void setSetId(Number value) {
        setAttributeInternal(SETID, value);
    }

    /**
     * Gets the attribute value for ArticleId, using the alias name ArticleId.
     * @return the ArticleId
     */
    public Number getArticleId() {
        return (Number)getAttributeInternal(ARTICLEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArticleId.
     * @param value value to set the ArticleId
     */
    public void setArticleId(Number value) {
        setAttributeInternal(ARTICLEID, value);
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the Quantity
     */
    public Number getQuantity() {
        return (Number)getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(Number value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for EbsStatus, using the alias name EbsStatus.
     * @return the EbsStatus
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EbsStatus.
     * @param value value to set the EbsStatus
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxpmMadeupSetsImpl.
     */
    public XxpmMadeupSetsImpl getXxpmMadeupSets() {
        return (XxpmMadeupSetsImpl)getAttributeInternal(XXPMMADEUPSETS);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupSetsImpl.
     */
    public void setXxpmMadeupSets(XxpmMadeupSetsImpl value) {
        setAttributeInternal(XXPMMADEUPSETS, value);
    }

    /**
     * @return the associated entity XxpmMadeupArticlesImpl.
     */
    public XxpmMadeupArticlesImpl getXxpmMadeupArticles() {
        return (XxpmMadeupArticlesImpl)getAttributeInternal(XXPMMADEUPARTICLES);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmMadeupArticlesImpl.
     */
    public void setXxpmMadeupArticles(XxpmMadeupArticlesImpl value) {
        setAttributeInternal(XXPMMADEUPARTICLES, value);
    }

    /**
     * @param setArticleId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence setArticleId) {
        return new Key(new Object[] { setArticleId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmMadeupSetArticles");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);

            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try {
            super.doDML(operation, e);
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmMadeupSetArticlesImpl. Class: " + e1.getClass());
            return;
        }
    }
    ModelActions ma = new ModelActions();
}
