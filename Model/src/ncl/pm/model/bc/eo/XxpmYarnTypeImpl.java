package ncl.pm.model.bc.eo;

import ncl.pm.model.bc.view.xxpmJC.ModelActions;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 18 15:10:32 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmYarnTypeImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        YtId {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getYtId();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setYtId((DBSequence)value);
            }
        },
        FancyYarnType {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getFancyYarnType();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setFancyYarnType((String)value);
            }
        },
        FytRatio {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getFytRatio();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setFytRatio((Number)value);
            }
        },
        SlubCode {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getSlubCode();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setSlubCode((String)value);
            }
        },
        Denier1 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDenier1();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDenier1((Number)value);
            }
        },
        Denier2 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDenier2();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDenier2((Number)value);
            }
        },
        ImId {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getImId();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setImId((Number)value);
            }
        },
        Draft2 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDraft2();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDraft2((Number)value);
            }
        },
        Draft1 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDraft1();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDraft1((Number)value);
            }
        },
        DualCore {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDualCore();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDualCore((String)value);
            }
        },
        FancyYarnType2 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getFancyYarnType2();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setFancyYarnType2((String)value);
            }
        },
        FytRatio2 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getFytRatio2();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setFytRatio2((Number)value);
            }
        },
        NewRow {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getNewRow();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setNewRow((Number)value);
            }
        },
        Multicount {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getMulticount();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setMulticount((String)value);
            }
        },
        Dtex1 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDtex1();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDtex1((String)value);
            }
        },
        Dtex2 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getDtex2();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setDtex2((String)value);
            }
        },
        XxpmItemMaster {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getXxpmItemMaster();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setXxpmItemMaster((XxpmItemMasterImpl)value);
            }
        },
        XxpmItemMaster1 {
            public Object get(XxpmYarnTypeImpl obj) {
                return obj.getXxpmItemMaster1();
            }

            public void put(XxpmYarnTypeImpl obj, Object value) {
                obj.setXxpmItemMaster1((XxpmItemMasterImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmYarnTypeImpl object);

        public abstract void put(XxpmYarnTypeImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int YTID = AttributesEnum.YtId.index();
    public static final int FANCYYARNTYPE =
        AttributesEnum.FancyYarnType.index();
    public static final int FYTRATIO = AttributesEnum.FytRatio.index();
    public static final int SLUBCODE = AttributesEnum.SlubCode.index();
    public static final int DENIER1 = AttributesEnum.Denier1.index();
    public static final int DENIER2 = AttributesEnum.Denier2.index();
    public static final int IMID = AttributesEnum.ImId.index();
    public static final int DRAFT2 = AttributesEnum.Draft2.index();
    public static final int DRAFT1 = AttributesEnum.Draft1.index();
    public static final int DUALCORE = AttributesEnum.DualCore.index();
    public static final int FANCYYARNTYPE2 =
        AttributesEnum.FancyYarnType2.index();
    public static final int FYTRATIO2 = AttributesEnum.FytRatio2.index();
    public static final int NEWROW = AttributesEnum.NewRow.index();
    public static final int MULTICOUNT = AttributesEnum.Multicount.index();
    public static final int DTEX1 = AttributesEnum.Dtex1.index();
    public static final int DTEX2 = AttributesEnum.Dtex2.index();
    public static final int XXPMITEMMASTER =
        AttributesEnum.XxpmItemMaster.index();
    public static final int XXPMITEMMASTER1 =
        AttributesEnum.XxpmItemMaster1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmYarnTypeImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("ncl.pm.model.bc.eo.XxpmYarnType");
        }
        return mDefinitionObject;
    }

    @Override
    public void postChanges(TransactionEvent e) {
        if (this.getPostState() == STATUS_NEW ||
            this.getPostState() == STATUS_MODIFIED) {
            XxpmItemMasterImpl item =
                (XxpmItemMasterImpl)this.getXxpmItemMaster();
            if (item != null) {
                item.postChanges(e);
            }
        }
        super.postChanges(e);
    }

    /**
     * Gets the attribute value for YtId, using the alias name YtId.
     * @return the YtId
     */
    public DBSequence getYtId() {
        return (DBSequence)getAttributeInternal(YTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for YtId.
     * @param value value to set the YtId
     */
    public void setYtId(DBSequence value) {
        setAttributeInternal(YTID, value);
    }

    /**
     * Gets the attribute value for FancyYarnType, using the alias name FancyYarnType.
     * @return the FancyYarnType
     */
    public String getFancyYarnType() {
        return (String)getAttributeInternal(FANCYYARNTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FancyYarnType.
     * @param value value to set the FancyYarnType
     */
    public void setFancyYarnType(String value) {
        setAttributeInternal(FANCYYARNTYPE, value);
    }

    /**
     * Gets the attribute value for FytRatio, using the alias name FytRatio.
     * @return the FytRatio
     */
    public Number getFytRatio() {
        return (Number)getAttributeInternal(FYTRATIO);
    }

    /**
     * Sets <code>value</code> as the attribute value for FytRatio.
     * @param value value to set the FytRatio
     */
    public void setFytRatio(Number value) {
        setAttributeInternal(FYTRATIO, value);
    }

    /**
     * Gets the attribute value for SlubCode, using the alias name SlubCode.
     * @return the SlubCode
     */
    public String getSlubCode() {
        return (String)getAttributeInternal(SLUBCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlubCode.
     * @param value value to set the SlubCode
     */
    public void setSlubCode(String value) {
        setAttributeInternal(SLUBCODE, value);
    }

    /**
     * Gets the attribute value for Denier1, using the alias name Denier1.
     * @return the Denier1
     */
    public Number getDenier1() {
        return (Number)getAttributeInternal(DENIER1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Denier1.
     * @param value value to set the Denier1
     */
    public void setDenier1(Number value) {
        setAttributeInternal(DENIER1, value);
    }

    /**
     * Gets the attribute value for Denier2, using the alias name Denier2.
     * @return the Denier2
     */
    public Number getDenier2() {
        return (Number)getAttributeInternal(DENIER2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Denier2.
     * @param value value to set the Denier2
     */
    public void setDenier2(Number value) {
        setAttributeInternal(DENIER2, value);
    }

    /**
     * Gets the attribute value for ImId, using the alias name ImId.
     * @return the ImId
     */
    public Number getImId() {
        return (Number)getAttributeInternal(IMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImId.
     * @param value value to set the ImId
     */
    public void setImId(Number value) {
        setAttributeInternal(IMID, value);
    }

    /**
     * Gets the attribute value for Draft2, using the alias name Draft2.
     * @return the Draft2
     */
    public Number getDraft2() {
        return (Number)getAttributeInternal(DRAFT2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Draft2.
     * @param value value to set the Draft2
     */
    public void setDraft2(Number value) {
        setAttributeInternal(DRAFT2, value);
    }

    /**
     * Gets the attribute value for Draft1, using the alias name Draft1.
     * @return the Draft1
     */
    public Number getDraft1() {
        return (Number)getAttributeInternal(DRAFT1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Draft1.
     * @param value value to set the Draft1
     */
    public void setDraft1(Number value) {
        setAttributeInternal(DRAFT1, value);
    }

    /**
     * Gets the attribute value for DualCore, using the alias name DualCore.
     * @return the DualCore
     */
    public String getDualCore() {
        return (String)getAttributeInternal(DUALCORE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DualCore.
     * @param value value to set the DualCore
     */
    public void setDualCore(String value) {
        setAttributeInternal(DUALCORE, value);
    }

    /**
     * Gets the attribute value for FancyYarnType2, using the alias name FancyYarnType2.
     * @return the FancyYarnType2
     */
    public String getFancyYarnType2() {
        return (String)getAttributeInternal(FANCYYARNTYPE2);
    }

    /**
     * Sets <code>value</code> as the attribute value for FancyYarnType2.
     * @param value value to set the FancyYarnType2
     */
    public void setFancyYarnType2(String value) {
        setAttributeInternal(FANCYYARNTYPE2, value);
    }

    /**
     * Gets the attribute value for FytRatio2, using the alias name FytRatio2.
     * @return the FytRatio2
     */
    public Number getFytRatio2() {
        return (Number)getAttributeInternal(FYTRATIO2);
    }

    /**
     * Sets <code>value</code> as the attribute value for FytRatio2.
     * @param value value to set the FytRatio2
     */
    public void setFytRatio2(Number value) {
        setAttributeInternal(FYTRATIO2, value);
    }

    /**
     * Gets the attribute value for NewRow, using the alias name NewRow.
     * @return the NewRow
     */
    public Number getNewRow() {
        return (Number)getAttributeInternal(NEWROW);
    }

    /**
     * Sets <code>value</code> as the attribute value for NewRow.
     * @param value value to set the NewRow
     */
    public void setNewRow(Number value) {
        setAttributeInternal(NEWROW, value);
    }

    /**
     * Gets the attribute value for Multicount, using the alias name Multicount.
     * @return the Multicount
     */
    public String getMulticount() {
        return (String)getAttributeInternal(MULTICOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Multicount.
     * @param value value to set the Multicount
     */
    public void setMulticount(String value) {
        setAttributeInternal(MULTICOUNT, value);
    }

    /**
     * Gets the attribute value for Dtex1, using the alias name Dtex1.
     * @return the Dtex1
     */
    public String getDtex1() {
        return (String)getAttributeInternal(DTEX1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dtex1.
     * @param value value to set the Dtex1
     */
    public void setDtex1(String value) {
        setAttributeInternal(DTEX1, value);
    }

    /**
     * Gets the attribute value for Dtex2, using the alias name Dtex2.
     * @return the Dtex2
     */
    public String getDtex2() {
        return (String)getAttributeInternal(DTEX2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dtex2.
     * @param value value to set the Dtex2
     */
    public void setDtex2(String value) {
        setAttributeInternal(DTEX2, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity XxpmItemMasterImpl.
     */
    public XxpmItemMasterImpl getXxpmItemMaster() {
        return (XxpmItemMasterImpl)getAttributeInternal(XXPMITEMMASTER);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmItemMasterImpl.
     */
    public void setXxpmItemMaster(XxpmItemMasterImpl value) {
        setAttributeInternal(XXPMITEMMASTER, value);
    }

    /**
     * @return the associated entity XxpmItemMasterImpl.
     */
    public XxpmItemMasterImpl getXxpmItemMaster1() {
        return (XxpmItemMasterImpl)getAttributeInternal(XXPMITEMMASTER1);
    }

    /**
     * Sets <code>value</code> as the associated entity XxpmItemMasterImpl.
     */
    public void setXxpmItemMaster1(XxpmItemMasterImpl value) {
        setAttributeInternal(XXPMITEMMASTER1, value);
    }


    /**
     * @param ytId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence ytId) {
        return new Key(new Object[] { ytId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);

            super.lock();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try {
            super.doDML(operation, e);
        } catch (DMLConstraintException dce) {
            ma.showError(this.getDBTransaction(),
                         "Constraint: " + dce.getConstraintName() +
                         " voilated.");
            return;

        } catch (DMLException de) {
            String exception = de.getCause().toString();
            String msg =
                exception.substring(exception.indexOf(":", exception.indexOf("ORA")) +
                                    2);
            ma.showError(this.getDBTransaction(),
                         msg.substring(0, msg.indexOf("ORA") > 1 ?
                                          msg.indexOf("ORA") - 1 :
                                          msg.length()));
            return;

        } catch (Exception e1) {
            e1.printStackTrace();
            ma.showError(this.getDBTransaction(),
                         "There is an error in doDML method of XxpmYarnTypeImpl. Class: " + e1.getClass());
            return;
        }
    }
    ModelActions ma = new ModelActions();
}
