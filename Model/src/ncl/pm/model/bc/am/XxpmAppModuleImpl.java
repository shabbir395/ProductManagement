package ncl.pm.model.bc.am;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import ncl.pm.model.bc.am.common.XxpmAppModule;
import ncl.pm.model.bc.vo.XxpmAbAccessoriesColorsViewImpl;
import ncl.pm.model.bc.vo.XxpmAbAccessoriesSizesViewImpl;
import ncl.pm.model.bc.vo.XxpmAbFabricColorsViewImpl;
import ncl.pm.model.bc.vo.XxpmAbFabricSizesViewImpl;
import ncl.pm.model.bc.vo.XxpmArticleBomAccessoriesViewImpl;
import ncl.pm.model.bc.vo.XxpmArticleBomFabricViewImpl;
import ncl.pm.model.bc.vo.XxpmArticleBomViewImpl;
import ncl.pm.model.bc.vo.XxpmItemMasterDyViewImpl;
import ncl.pm.model.bc.vo.XxpmItemMasterPrnViewImpl;
import ncl.pm.model.bc.vo.XxpmItemMasterSpnViewImpl;
import ncl.pm.model.bc.vo.XxpmItemMasterWvViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupArticlesViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupColorsViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupCombinationsViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupDimensionsViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupProgramsViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupSetArticlesViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupSetsViewImpl;
import ncl.pm.model.bc.vo.XxpmMadeupSizesViewImpl;
import ncl.pm.model.bc.vo.XxpmPoHeaderViewImpl;
import ncl.pm.model.bc.vo.XxpmPoLinesViewImpl;
import ncl.pm.model.bc.vo.XxpmSetBomAccessoriesViewImpl;
import ncl.pm.model.bc.vo.XxpmSetBomArticlesViewImpl;
import ncl.pm.model.bc.vo.XxpmSetBomViewImpl;
import ncl.pm.model.bc.vo.XxpmWarpViewImpl;
import ncl.pm.model.bc.vo.XxpmWeftViewImpl;
import ncl.pm.model.bc.vo.XxpmYarnBlendViewImpl;
import ncl.pm.model.bc.vo.XxpmYarnTypeViewImpl;
import ncl.pm.model.bc.vo.lov.ArticleBomAcclovImpl;
import ncl.pm.model.bc.vo.lov.ArticleBomFablovImpl;
import ncl.pm.model.bc.vo.lov.ItemColorsLovImpl;
import ncl.pm.model.bc.vo.lov.ItemSizeLovImpl;
import ncl.pm.model.bc.vo.lov.MadeupArticlesDetailsLovImpl;
import ncl.pm.model.bc.vo.lov.MadeupProgDetailsLovImpl;
import ncl.pm.model.bc.vo.lov.VendorsLovImpl;

import ncl.pm.model.bc.vo.lov.WeavingItemDescLovImpl;
import ncl.pm.model.bc.vo.misc.MadeupCombinationsExportToExcelViewImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 18 20:35:49 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmAppModuleImpl extends ApplicationModuleImpl implements XxpmAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public XxpmAppModuleImpl() {
    }

    Logger logger = Logger.getLogger(this.getClass().getName());

    /**
     * Container's getter for XxpmItemMasterSpnView.
     * @return XxpmItemMasterSpnView
     */
    public ViewObjectImpl getXxpmItemMasterSpnView() {
        return (ViewObjectImpl)findViewObject("XxpmItemMasterSpnView");
    }

    /**
     * Container's getter for XxpmYarnBlendViewChild.
     * @return XxpmYarnBlendViewChild
     */
    public XxpmYarnBlendViewImpl getXxpmYarnBlendViewChild() {
        return (XxpmYarnBlendViewImpl)findViewObject("XxpmYarnBlendViewChild");
    }

    /**
     * Container's getter for XxpmYarnTypeViewChild.
     * @return XxpmYarnTypeViewChild
     */
    public ViewObjectImpl getXxpmYarnTypeViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmYarnTypeViewChild");
    }


    /**
     * Container's getter for XxpmYarnBlendImIdFkLink.
     * @return XxpmYarnBlendImIdFkLink
     */
    public ViewLinkImpl getXxpmYarnBlendImIdFkLink() {
        return (ViewLinkImpl)findViewLink("XxpmYarnBlendImIdFkLink");
    }

    /**
     * Container's getter for XxpmYarnTypeImIdFkLink1.
     * @return XxpmYarnTypeImIdFkLink1
     */
    public ViewLinkImpl getXxpmYarnTypeImIdFkLink1() {
        return (ViewLinkImpl)findViewLink("XxpmYarnTypeImIdFkLink1");
    }

    public void blankPage(ViewObject vo) {
        this.getDBTransaction().rollback();
        //        String where1 = "1=2";
        //        vo.setWhereClause(where1);
        //        vo.executeQuery();
        //        String where2 = "1=1";
        //        vo.setWhereClause(where2);
        vo.executeEmptyRowSet();
    }

    public void blankSpnPage() {
        blankPage(this.getXxpmItemMasterSpnView());
    }

    public void blankWvPage() {
        blankPage(this.getXxpmItemMasterWvView());
    }

    public void blankDyPage() {
        blankPage(this.getXxpmItemMasterDyView());
    }

    public void blankPrnPage() {
        blankPage(this.getXxpmItemMasterPrnView());
    }

    public void blankAccPage() {
        blankPage(this.getXxpmItemMasterAccView());
    }

    public void blankMadeupPage() {
        blankPage(this.getXxpmMadeupProgramsView());
    }

    public void blankArtBomPage() {
        blankPage(this.getXxpmArticleBomView());
    }

    public void blankSetBomPage() {
        blankPage(this.getXxpmSetBomView());
    }

    public void blankPoPage() {
        blankPage(this.getXxpmPoHeaderView());
    }

    public void blankMadeupCombsReportPage() {
        blankPage(this.getMadeupCombinationsExportToExcelView());
    }

    public void blankAccessoriesReportPage() {
        blankPage(this.getAccessoriesExportToExcalView());
    }

    /**
     * Container's getter for XxpmItemMasterWvView.
     * @return XxpmItemMasterWvView
     */
    public ViewObjectImpl getXxpmItemMasterWvView() {
        return (ViewObjectImpl)findViewObject("XxpmItemMasterWvView");
    }

    /**
     * Container's getter for XxpmWarpViewChild.
     * @return XxpmWarpViewChild
     */
    public ViewObjectImpl getXxpmWarpViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmWarpViewChild");
    }

    /**
     * Container's getter for XxpmWarpImIdFkLink1.
     * @return XxpmWarpImIdFkLink1
     */
    public ViewLinkImpl getXxpmWarpImIdFkLink1() {
        return (ViewLinkImpl)findViewLink("XxpmWarpImIdFkLink1");
    }


    /**
     * Container's getter for XxpmWeftViewChild.
     * @return XxpmWeftViewChild
     */
    public ViewObjectImpl getXxpmWeftViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmWeftViewChild");
    }

    /**
     * Container's getter for XxpmWeftImIdFkLink1.
     * @return XxpmWeftImIdFkLink1
     */
    public ViewLinkImpl getXxpmWeftImIdFkLink1() {
        return (ViewLinkImpl)findViewLink("XxpmWeftImIdFkLink1");
    }


    /**
     * Container's getter for XxpmItemMasterDyView.
     * @return XxpmItemMasterDyView
     */
    public ViewObjectImpl getXxpmItemMasterDyView() {
        return (ViewObjectImpl)findViewObject("XxpmItemMasterDyView");
    }


    /**
     * Container's getter for XxpmAttachmentsViewChile.
     * @return XxpmAttachmentsViewChile
     */
    public ViewObjectImpl getXxpmAttachmentsViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmAttachmentsViewChild");
    }

    /**
     * Container's getter for XxpmAttachmentsImIdFkLink.
     * @return XxpmAttachmentsImIdFkLink
     */
    public ViewLinkImpl getXxpmAttachmentsImIdFkLink() {
        return (ViewLinkImpl)findViewLink("XxpmAttachmentsImIdFkLink");
    }

    /**
     * Container's getter for XxpmItemMasterPrnView.
     * @return XxpmItemMasterPrnView
     */
    public ViewObjectImpl getXxpmItemMasterPrnView() {
        return (ViewObjectImpl)findViewObject("XxpmItemMasterPrnView");
    }


    /**
     * Container's getter for XxpmAttachmentsViewChildWv.
     * @return XxpmAttachmentsViewChildWv
     */
    public ViewObjectImpl getXxpmAttachmentsViewChildWv() {
        return (ViewObjectImpl)findViewObject("XxpmAttachmentsViewChildWv");
    }

    /**
     * Container's getter for XxpmAttachmentsImIdFkLinkWv.
     * @return XxpmAttachmentsImIdFkLinkWv
     */
    public ViewLinkImpl getXxpmAttachmentsImIdFkLinkWv() {
        return (ViewLinkImpl)findViewLink("XxpmAttachmentsImIdFkLinkWv");
    }

    /**
     * Container's getter for XxpmItemMasterAccView.
     * @return XxpmItemMasterAccView
     */
    public ViewObjectImpl getXxpmItemMasterAccView() {
        return (ViewObjectImpl)findViewObject("XxpmItemMasterAccView");
    }


    /**
     * Container's getter for XxpmMadeupProgramsView.
     * @return XxpmMadeupProgramsView
     */
    public ViewObjectImpl getXxpmMadeupProgramsView() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupProgramsView");
    }

    /**
     * Container's getter for XxpmMadeupSetsViewChild.
     * @return XxpmMadeupSetsViewChild
     */
    public ViewObjectImpl getXxpmMadeupSetsViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupSetsViewChild");
    }

    /**
     * Container's getter for SetsProgIdFkLink.
     * @return SetsProgIdFkLink
     */
    public ViewLinkImpl getSetsProgIdFkLink() {
        return (ViewLinkImpl)findViewLink("SetsProgIdFkLink");
    }

    /**
     * Container's getter for XxpmMadeupArticlesViewProgChild.
     * @return XxpmMadeupArticlesViewProgChild
     */
    public ViewObjectImpl getXxpmMadeupArticlesViewProgChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupArticlesViewProgChild");
    }

    /**
     * Container's getter for ArticlesProgIdFkLink.
     * @return ArticlesProgIdFkLink
     */
    public ViewLinkImpl getArticlesProgIdFkLink() {
        return (ViewLinkImpl)findViewLink("ArticlesProgIdFkLink");
    }

    /**
     * Container's getter for XxpmMadeupColorsViewChild.
     * @return XxpmMadeupColorsViewChild
     */
    public ViewObjectImpl getXxpmMadeupColorsViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupColorsViewChild");
    }

    /**
     * Container's getter for ColorsProgIdFkLink.
     * @return ColorsProgIdFkLink
     */
    public ViewLinkImpl getColorsProgIdFkLink() {
        return (ViewLinkImpl)findViewLink("ColorsProgIdFkLink");
    }


    /**
     * Container's getter for XxpmMadeupDimensionsViewChild.
     * @return XxpmMadeupDimensionsViewChild
     */
    public ViewObjectImpl getXxpmMadeupDimensionsViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupDimensionsViewChild");
    }

    /**
     * Container's getter for DimensionArticleIdFkLink.
     * @return DimensionArticleIdFkLink
     */
    public ViewLinkImpl getDimensionArticleIdFkLink() {
        return (ViewLinkImpl)findViewLink("DimensionArticleIdFkLink");
    }

    /**
     * Container's getter for XxpmMadeupCombinationsViewChild.
     * @return XxpmMadeupCombinationsViewChild
     */
    public ViewObjectImpl getXxpmMadeupCombinationsViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupCombinationsViewChild");
    }

    /**
     * Container's getter for CombinationArticleIdFkLink.
     * @return CombinationArticleIdFkLink
     */
    public ViewLinkImpl getCombinationArticleIdFkLink() {
        return (ViewLinkImpl)findViewLink("CombinationArticleIdFkLink");
    }

    /**
     * Container's getter for CustomersLov.
     * @return CustomersLov
     */
    public ViewObjectImpl getCustomersLov() {
        return (ViewObjectImpl)findViewObject("CustomersLov");
    }

    /**
     * Container's getter for SpinningItemDescView.
     * @return SpinningItemDescView
     */
    public ViewObjectImpl getSpinningItemDescView() {
        return (ViewObjectImpl)findViewObject("SpinningItemDescView");
    }

    /**
     * Container's getter for WeavingItemDescView.
     * @return WeavingItemDescView
     */
    public ViewObjectImpl getWeavingItemDescView() {
        return (ViewObjectImpl)findViewObject("WeavingItemDescView");
    }

    /**
     * Container's getter for DyeingItemDescView.
     * @return DyeingItemDescView
     */
    public ViewObjectImpl getDyeingItemDescView() {
        return (ViewObjectImpl)findViewObject("DyeingItemDescView");
    }

    /**
     * Container's getter for PrintingItemDescView.
     * @return PrintingItemDescView
     */
    public ViewObjectImpl getPrintingItemDescView() {
        return (ViewObjectImpl)findViewObject("PrintingItemDescView");
    }

    /**
     * Container's getter for AccessoryItemDescView.
     * @return AccessoryItemDescView
     */
    public ViewObjectImpl getAccessoryItemDescView() {
        return (ViewObjectImpl)findViewObject("AccessoryItemDescView");
    }

    /**
     * Container's getter for WeavingItemDescLov.
     * @return WeavingItemDescLov
     */
    public ViewObjectImpl getWeavingItemDescLov() {
        return (ViewObjectImpl)findViewObject("WeavingItemDescLov");
    }

    /**
     * Container's getter for XxpmMadeupSetArticlesViewSetsChild.
     * @return XxpmMadeupSetArticlesViewSetsChild
     */
    public ViewObjectImpl getXxpmMadeupSetArticlesViewSetsChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupSetArticlesViewSetsChild");
    }

    /**
     * Container's getter for SetArticlesSetIdFkLink.
     * @return SetArticlesSetIdFkLink
     */
    public ViewLinkImpl getSetArticlesSetIdFkLink() {
        return (ViewLinkImpl)findViewLink("SetArticlesSetIdFkLink");
    }

    /**
     * Container's getter for ItemColorsLov.
     * @return ItemColorsLov
     */
    public ViewObjectImpl getItemColorsLov() {
        return (ViewObjectImpl)findViewObject("ItemColorsLov");
    }

    /**
     * Container's getter for ItemSizeLov.
     * @return ItemSizeLov
     */
    public ViewObjectImpl getItemSizeLov() {
        return (ViewObjectImpl)findViewObject("ItemSizeLov");
    }

    /**
     * Container's getter for XxpmMadeupSetArticlesView.
     * @return XxpmMadeupSetArticlesView
     */
    public XxpmMadeupSetArticlesViewImpl getXxpmMadeupSetArticlesView() {
        return (XxpmMadeupSetArticlesViewImpl)findViewObject("XxpmMadeupSetArticlesView");
    }

    /**
     * Container's getter for XxpmMadeupSizesViewChild.
     * @return XxpmMadeupSizesViewChild
     */
    public ViewObjectImpl getXxpmMadeupSizesViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmMadeupSizesViewChild");
    }

    /**
     * Container's getter for SizesProgIdFkLink.
     * @return SizesProgIdFkLink
     */
    public ViewLinkImpl getSizesProgIdFkLink() {
        return (ViewLinkImpl)findViewLink("SizesProgIdFkLink");
    }

    /**
     * Container's getter for XxpmAttachmentsViewChildProg.
     * @return XxpmAttachmentsViewChildProg
     */
    public ViewObjectImpl getXxpmAttachmentsViewChildProg() {
        return (ViewObjectImpl)findViewObject("XxpmAttachmentsViewChildProg");
    }

    /**
     * Container's getter for XxpmAtchProgIdFkLink1.
     * @return XxpmAtchProgIdFkLink1
     */
    public ViewLinkImpl getXxpmAtchProgIdFkLink1() {
        return (ViewLinkImpl)findViewLink("XxpmAtchProgIdFkLink1");
    }

    /**
     * Container's getter for MadeupProgramDescView.
     * @return MadeupProgramDescView
     */
    public ViewObjectImpl getMadeupProgramDescView() {
        return (ViewObjectImpl)findViewObject("MadeupProgramDescView");
    }

    /**
     * Container's getter for XxpmAttachmentsViewChildAcc.
     * @return XxpmAttachmentsViewChildAcc
     */
    public ViewObjectImpl getXxpmAttachmentsViewChildAcc() {
        return (ViewObjectImpl)findViewObject("XxpmAttachmentsViewChildAcc");
    }

    /**
     * Container's getter for XxpmAttachmentsImIdFkLinkAcc.
     * @return XxpmAttachmentsImIdFkLinkAcc
     */
    public ViewLinkImpl getXxpmAttachmentsImIdFkLinkAcc() {
        return (ViewLinkImpl)findViewLink("XxpmAttachmentsImIdFkLinkAcc");
    }

    /**
     * Container's getter for XxpmArticleBomView.
     * @return XxpmArticleBomView
     */
    public ViewObjectImpl getXxpmArticleBomView() {
        return (ViewObjectImpl)findViewObject("XxpmArticleBomView");
    }


    /**
     * Container's getter for MadeupArticlesDetailsLov.
     * @return MadeupArticlesDetailsLov
     */
    public MadeupArticlesDetailsLovImpl getMadeupArticlesDetailsLov() {
        return (MadeupArticlesDetailsLovImpl)findViewObject("MadeupArticlesDetailsLov");
    }

    /**
     * Container's getter for MadeupProgDetailsLov.
     * @return MadeupProgDetailsLov
     */
    public MadeupProgDetailsLovImpl getMadeupProgDetailsLov() {
        return (MadeupProgDetailsLovImpl)findViewObject("MadeupProgDetailsLov");
    }

    /**
     * Container's getter for MadeupCombDetailsLov.
     * @return MadeupCombDetailsLov
     */
    public ViewObjectImpl getMadeupCombDetailsLov() {
        return (ViewObjectImpl)findViewObject("MadeupCombDetailsLov");
    }

    /**
     * Container's getter for XxpmArticleBomAccessoriesViewChild.
     * @return XxpmArticleBomAccessoriesViewChild
     */
    public ViewObjectImpl getXxpmArticleBomAccessoriesViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmArticleBomAccessoriesViewChild");
    }

    /**
     * Container's getter for ArtBomAccArtBomIdFkLink.
     * @return ArtBomAccArtBomIdFkLink
     */
    public ViewLinkImpl getArtBomAccArtBomIdFkLink() {
        return (ViewLinkImpl)findViewLink("ArtBomAccArtBomIdFkLink");
    }

    /**
     * Container's getter for XxpmArticleBomFabricViewChild.
     * @return XxpmArticleBomFabricViewChild
     */
    public ViewObjectImpl getXxpmArticleBomFabricViewChild() {
        return (ViewObjectImpl)findViewObject("XxpmArticleBomFabricViewChild");
    }

    /**
     * Container's getter for ArtBomFabArtBomIdFkLink1.
     * @return ArtBomFabArtBomIdFkLink1
     */
    public ViewLinkImpl getArtBomFabArtBomIdFkLink() {
        return (ViewLinkImpl)findViewLink("ArtBomFabArtBomIdFkLink");
    }

    /**
     * Container's getter for ArticleBomFablov.
     * @return ArticleBomFablov
     */
    public ViewObjectImpl getArticleBomFablov() {
        return (ViewObjectImpl)findViewObject("ArticleBomFablov");
    }


    /**
     * Container's getter for XxpmAbFabricColorsViewChild.
     * @return XxpmAbFabricColorsViewChild
     */
    public XxpmAbFabricColorsViewImpl getXxpmAbFabricColorsViewChild() {
        return (XxpmAbFabricColorsViewImpl)findViewObject("XxpmAbFabricColorsViewChild");
    }

    /**
     * Container's getter for AbFabClrArtBomFabIdFkLink.
     * @return AbFabClrArtBomFabIdFkLink
     */
    public ViewLinkImpl getAbFabClrArtBomFabIdFkLink() {
        return (ViewLinkImpl)findViewLink("AbFabClrArtBomFabIdFkLink");
    }

    /**
     * Container's getter for XxpmAbFabricSizesViewChild.
     * @return XxpmAbFabricSizesViewChild
     */
    public XxpmAbFabricSizesViewImpl getXxpmAbFabricSizesViewChild() {
        return (XxpmAbFabricSizesViewImpl)findViewObject("XxpmAbFabricSizesViewChild");
    }

    /**
     * Container's getter for AbFabSizesArtBomFabIdFkLink.
     * @return AbFabSizesArtBomFabIdFkLink
     */
    public ViewLinkImpl getAbFabSizesArtBomFabIdFkLink() {
        return (ViewLinkImpl)findViewLink("AbFabSizesArtBomFabIdFkLink");
    }

    /**
     * Container's getter for XxpmAbAccessoriesColorsViewChild.
     * @return XxpmAbAccessoriesColorsViewChild
     */
    public XxpmAbAccessoriesColorsViewImpl getXxpmAbAccessoriesColorsViewChild() {
        return (XxpmAbAccessoriesColorsViewImpl)findViewObject("XxpmAbAccessoriesColorsViewChild");
    }

    /**
     * Container's getter for AbAccClrArtBomAccIdFkLink.
     * @return AbAccClrArtBomAccIdFkLink
     */
    public ViewLinkImpl getAbAccClrArtBomAccIdFkLink() {
        return (ViewLinkImpl)findViewLink("AbAccClrArtBomAccIdFkLink");
    }

    /**
     * Container's getter for XxpmAbAccessoriesSizesViewChild.
     * @return XxpmAbAccessoriesSizesViewChild
     */
    public XxpmAbAccessoriesSizesViewImpl getXxpmAbAccessoriesSizesViewChild() {
        return (XxpmAbAccessoriesSizesViewImpl)findViewObject("XxpmAbAccessoriesSizesViewChild");
    }

    /**
     * Container's getter for AbAccSizesArtBomAccIdFkLink.
     * @return AbAccSizesArtBomAccIdFkLink
     */
    public ViewLinkImpl getAbAccSizesArtBomAccIdFkLink() {
        return (ViewLinkImpl)findViewLink("AbAccSizesArtBomAccIdFkLink");
    }

    /**
     * Container's getter for MadeupCombDetailsLovChild.
     * @return MadeupCombDetailsLovChild
     */
    public ViewObjectImpl getMadeupCombDetailsLovChild() {
        return (ViewObjectImpl)findViewObject("MadeupCombDetailsLovChild");
    }

    /**
     * Container's getter for MadeupCombDetailsLovArticleIdFkLink.
     * @return MadeupCombDetailsLovArticleIdFkLink
     */
    public ViewLinkImpl getMadeupCombDetailsLovArticleIdFkLink() {
        return (ViewLinkImpl)findViewLink("MadeupCombDetailsLovArticleIdFkLink");
    }


    /**
     * Container's getter for ArticleBomAcclov.
     * @return ArticleBomAcclov
     */
    public ViewObjectImpl getArticleBomAcclov() {
        return (ViewObjectImpl)findViewObject("ArticleBomAcclov");
    }

    /**
     * Container's getter for ArticleBomCombColorsView.
     * @return ArticleBomCombColorsView
     */
    public ViewObjectImpl getArticleBomCombColorsView() {
        return (ViewObjectImpl)findViewObject("ArticleBomCombColorsView");
    }

    /**
     * Container's getter for ArticleBomCombSizesView.
     * @return ArticleBomCombSizesView
     */
    public ViewObjectImpl getArticleBomCombSizesView() {
        return (ViewObjectImpl)findViewObject("ArticleBomCombSizesView");
    }

    /**
     * Container's getter for ArticleBomApprovalView.
     * @return ArticleBomApprovalView
     */
    public ViewObjectImpl getArticleBomApprovalView() {
        return (ViewObjectImpl)findViewObject("ArticleBomApprovalView");
    }

    /**
     * Container's getter for XxpmArticleBomReadOnlyView.
     * @return XxpmArticleBomReadOnlyView
     */
    public XxpmArticleBomViewImpl getXxpmArticleBomReadOnlyView() {
        return (XxpmArticleBomViewImpl)findViewObject("XxpmArticleBomReadOnlyView");
    }

    /**
     * Container's getter for MadeupCombDetailsLovReadOnlyChild.
     * @return MadeupCombDetailsLovReadOnlyChild
     */
    public ViewObjectImpl getMadeupCombDetailsLovReadOnlyChild() {
        return (ViewObjectImpl)findViewObject("MadeupCombDetailsLovReadOnlyChild");
    }

    /**
     * Container's getter for MadeupCombDetailsLovArticleIdFkLinkReadOnly.
     * @return MadeupCombDetailsLovArticleIdFkLinkReadOnly
     */
    public ViewLinkImpl getMadeupCombDetailsLovArticleIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("MadeupCombDetailsLovArticleIdFkLinkReadOnly");
    }

    /**
     * Container's getter for XxpmArticleBomAccessoriesViewReadOnlyChild.
     * @return XxpmArticleBomAccessoriesViewReadOnlyChild
     */
    public XxpmArticleBomAccessoriesViewImpl getXxpmArticleBomAccessoriesViewReadOnlyChild() {
        return (XxpmArticleBomAccessoriesViewImpl)findViewObject("XxpmArticleBomAccessoriesViewReadOnlyChild");
    }

    /**
     * Container's getter for ArtBomAccArtBomIdFkLinkReadOnly.
     * @return ArtBomAccArtBomIdFkLinkReadOnly
     */
    public ViewLinkImpl getArtBomAccArtBomIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("ArtBomAccArtBomIdFkLinkReadOnly");
    }

    /**
     * Container's getter for XxpmArticleBomFabricViewReadOnlyChild.
     * @return XxpmArticleBomFabricViewReadOnlyChild
     */
    public XxpmArticleBomFabricViewImpl getXxpmArticleBomFabricViewReadOnlyChild() {
        return (XxpmArticleBomFabricViewImpl)findViewObject("XxpmArticleBomFabricViewReadOnlyChild");
    }

    /**
     * Container's getter for ArtBomFabArtBomIdFkLinkReadOnly.
     * @return ArtBomFabArtBomIdFkLinkReadOnly
     */
    public ViewLinkImpl getArtBomFabArtBomIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("ArtBomFabArtBomIdFkLinkReadOnly");
    }

    /**
     * Container's getter for XxpmAbAccessoriesColorsViewReadOnlyChild.
     * @return XxpmAbAccessoriesColorsViewReadOnlyChild
     */
    public XxpmAbAccessoriesColorsViewImpl getXxpmAbAccessoriesColorsViewReadOnlyChild() {
        return (XxpmAbAccessoriesColorsViewImpl)findViewObject("XxpmAbAccessoriesColorsViewReadOnlyChild");
    }

    /**
     * Container's getter for AbAccClrArtBomAccIdFkLinkReadOnly.
     * @return AbAccClrArtBomAccIdFkLinkReadOnly
     */
    public ViewLinkImpl getAbAccClrArtBomAccIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("AbAccClrArtBomAccIdFkLinkReadOnly");
    }

    /**
     * Container's getter for XxpmAbAccessoriesSizesViewReadOnlyChild.
     * @return XxpmAbAccessoriesSizesViewReadOnlyChild
     */
    public XxpmAbAccessoriesSizesViewImpl getXxpmAbAccessoriesSizesViewReadOnlyChild() {
        return (XxpmAbAccessoriesSizesViewImpl)findViewObject("XxpmAbAccessoriesSizesViewReadOnlyChild");
    }

    /**
     * Container's getter for AbAccSizesArtBomAccIdFkLinkReadOnly.
     * @return AbAccSizesArtBomAccIdFkLinkReadOnly
     */
    public ViewLinkImpl getAbAccSizesArtBomAccIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("AbAccSizesArtBomAccIdFkLinkReadOnly");
    }

    /**
     * Container's getter for XxpmAbFabricColorsViewReadOnlyChild.
     * @return XxpmAbFabricColorsViewReadOnlyChild
     */
    public XxpmAbFabricColorsViewImpl getXxpmAbFabricColorsViewReadOnlyChild() {
        return (XxpmAbFabricColorsViewImpl)findViewObject("XxpmAbFabricColorsViewReadOnlyChild");
    }

    /**
     * Container's getter for AbFabClrArtBomFabIdFkLinkReadOnly.
     * @return AbFabClrArtBomFabIdFkLinkReadOnly
     */
    public ViewLinkImpl getAbFabClrArtBomFabIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("AbFabClrArtBomFabIdFkLinkReadOnly");
    }

    /**
     * Container's getter for XxpmAbFabricSizesViewReadOnlyChild.
     * @return XxpmAbFabricSizesViewReadOnlyChild
     */
    public XxpmAbFabricSizesViewImpl getXxpmAbFabricSizesViewReadOnlyChild() {
        return (XxpmAbFabricSizesViewImpl)findViewObject("XxpmAbFabricSizesViewReadOnlyChild");
    }

    /**
     * Container's getter for AbFabSizesArtBomFabIdFkLinkReadOnly.
     * @return AbFabSizesArtBomFabIdFkLinkReadOnly
     */
    public ViewLinkImpl getAbFabSizesArtBomFabIdFkLinkReadOnly() {
        return (ViewLinkImpl)findViewLink("AbFabSizesArtBomFabIdFkLinkReadOnly");
    }

    /**
     * Container's getter for ArticleBomSearchView.
     * @return ArticleBomSearchView
     */
    public ViewObjectImpl getArticleBomSearchView() {
        return (ViewObjectImpl)findViewObject("ArticleBomSearchView");
    }

    /**
     * Container's getter for XxpmPoHeaderView.
     * @return XxpmPoHeaderView
     */
    public ViewObjectImpl getXxpmPoHeaderView() {
        return (ViewObjectImpl)findViewObject("XxpmPoHeaderView");
    }

    /**
     * Container's getter for XxpmPoLinesViewChild.
     * @return XxpmPoLinesViewChild
     */
    public ViewObjectImpl getXxpmPoLinesViewAccChild() {
        return (ViewObjectImpl)findViewObject("XxpmPoLinesViewAccChild");
    }

    /**
     * Container's getter for PoLinesPoHeaderIdFkLink.
     * @return PoLinesPoHeaderIdFkLink
     */
    public ViewLinkImpl getPoLinesPoHeaderIdFkLink() {
        return (ViewLinkImpl)findViewLink("PoLinesPoHeaderIdFkLink");
    }

    /**
     * Container's getter for XxpmPoLinesViewFabChild.
     * @return XxpmPoLinesViewFabChild
     */
    public XxpmPoLinesViewImpl getXxpmPoLinesViewFabChild() {
        return (XxpmPoLinesViewImpl)findViewObject("XxpmPoLinesViewFabChild");
    }

    /**
     * Container's getter for PoLinesPoHeaderIdFkLink1.
     * @return PoLinesPoHeaderIdFkLink1
     */
    public ViewLinkImpl getPoLinesPoHeaderIdFkLink1() {
        return (ViewLinkImpl)findViewLink("PoLinesPoHeaderIdFkLink1");
    }


    /**
     * Container's getter for PoSearchSoHeaderIdLov.
     * @return PoSearchSoHeaderIdLov
     */
    public ViewObjectImpl getPoSearchSoHeaderIdLov() {
        return (ViewObjectImpl)findViewObject("PoSearchSoHeaderIdLov");
    }

    /**
     * Container's getter for PoSearchView.
     * @return PoSearchView
     */
    public ViewObjectImpl getPoSearchView() {
        return (ViewObjectImpl)findViewObject("PoSearchView");
    }

    /**
     * Container's getter for XxpmSetBomView.
     * @return XxpmSetBomView
     */
    public XxpmSetBomViewImpl getXxpmSetBomView() {
        return (XxpmSetBomViewImpl)findViewObject("XxpmSetBomView");
    }

    /**
     * Container's getter for XxpmSetBomArticlesViewChild.
     * @return XxpmSetBomArticlesViewChild
     */
    public XxpmSetBomArticlesViewImpl getXxpmSetBomArticlesViewChild() {
        return (XxpmSetBomArticlesViewImpl)findViewObject("XxpmSetBomArticlesViewChild");
    }

    /**
     * Container's getter for ArticlesSetBomIdFkLink1.
     * @return ArticlesSetBomIdFkLink1
     */
    public ViewLinkImpl getArticlesSetBomIdFkLink() {
        return (ViewLinkImpl)findViewLink("ArticlesSetBomIdFkLink");
    }

    /**
     * Container's getter for XxpmSetBomAccessoriesViewChild.
     * @return XxpmSetBomAccessoriesViewChild
     */
    public XxpmSetBomAccessoriesViewImpl getXxpmSetBomAccessoriesViewChild() {
        return (XxpmSetBomAccessoriesViewImpl)findViewObject("XxpmSetBomAccessoriesViewChild");
    }

    /**
     * Container's getter for SetBomAccessoryBomIdFkLink.
     * @return SetBomAccessoryBomIdFkLink
     */
    public ViewLinkImpl getSetBomAccessoryBomIdFkLink() {
        return (ViewLinkImpl)findViewLink("SetBomAccessoryBomIdFkLink");
    }

    /**
     * Container's getter for SetBomArticleDetailsView.
     * @return SetBomArticleDetailsView
     */
    public ViewObjectImpl getSetBomArticleDetailsView() {
        return (ViewObjectImpl)findViewObject("SetBomArticleDetailsView");
    }

    /**
     * Container's getter for SetBomAccessDescLov.
     * @return SetBomAccessDescLov
     */
    public ViewObjectImpl getSetBomAccessDescLov() {
        return (ViewObjectImpl)findViewObject("SetBomAccessDescLov");
    }

    /**
     * Container's getter for SetBomSearchView.
     * @return SetBomSearchView
     */
    public ViewObjectImpl getSetBomSearchView() {
        return (ViewObjectImpl)findViewObject("SetBomSearchView");
    }

    /**
     * Container's getter for AccCategoryTypeLov.
     * @return AccCategoryTypeLov
     */
    public ViewObjectImpl getAccCategoryTypeLov() {
        return (ViewObjectImpl)findViewObject("AccCategoryTypeLov");
    }

    /**
     * Container's getter for MadeupCombinationsExportToExcelView.
     * @return MadeupCombinationsExportToExcelView
     */
    public ViewObjectImpl getMadeupCombinationsExportToExcelView() {
        return (ViewObjectImpl)findViewObject("MadeupCombinationsExportToExcelView");
    }

    /**
     * Container's getter for MadeupAllProgramsView.
     * @return MadeupAllProgramsView
     */
    public ViewObjectImpl getMadeupAllProgramsView() {
        return (ViewObjectImpl)findViewObject("MadeupAllProgramsView");
    }

    /**
     * Container's getter for FndUserView.
     * @return FndUserView
     */
    public ViewObjectImpl getFndUserView() {
        return (ViewObjectImpl)findViewObject("FndUserView");
    }

    /**
     * Container's getter for AccessoriesExportToExcalView.
     * @return AccessoriesExportToExcalView
     */
    public ViewObjectImpl getAccessoriesExportToExcalView() {
        return (ViewObjectImpl)findViewObject("AccessoriesExportToExcalView");
    }

    /**
     * Container's getter for AccCategoriesView.
     * @return AccCategoriesView
     */
    public ViewObjectImpl getAccCategoriesView() {
        return (ViewObjectImpl)findViewObject("AccCategoriesView");
    }

    /**
     * Container's getter for PoStatusFilterView.
     * @return PoStatusFilterView
     */
    public ViewObjectImpl getPoStatusFilterView() {
        return (ViewObjectImpl)findViewObject("PoStatusFilterView");
    }

    /**
     * Container's getter for PoRcvStatusView.
     * @return PoRcvStatusView
     */
    public ViewObjectImpl getPoRcvStatusView() {
        return (ViewObjectImpl)findViewObject("PoRcvStatusView");
    }

    /**
     * Container's getter for VendorsLov.
     * @return VendorsLov
     */
    public VendorsLovImpl getVendorsLov() {
        return (VendorsLovImpl)findViewObject("VendorsLov");
    }

    /**
     * Container's getter for VendorSitesLov.
     * @return VendorSitesLov
     */
    public ViewObjectImpl getVendorSitesLov() {
        return (ViewObjectImpl)findViewObject("VendorSitesLov");
    }

    /**
     * Container's getter for ArticleBomForSpecificProgramView.
     * @return ArticleBomForSpecificProgramView
     */
    public ViewObjectImpl getArticleBomForSpecificProgramView() {
        return (ViewObjectImpl)findViewObject("ArticleBomForSpecificProgramView");
    }

    /**
     * Container's getter for ArticleBomVersionsLov.
     * @return ArticleBomVersionsLov
     */
    public ViewObjectImpl getArticleBomVersionsLov() {
        return (ViewObjectImpl)findViewObject("ArticleBomVersionsLov");
    }

    /**
     * Container's getter for MadeupAllProgramsDropdownLov1.
     * @return MadeupAllProgramsDropdownLov1
     */
    public ViewObjectImpl getMadeupAllProgramsDropdownLov() {
        return (ViewObjectImpl)findViewObject("MadeupAllProgramsDropdownLov");
    }

    /**
     * Container's getter for MadeupAccProgramsDropdownLov.
     * @return MadeupAccProgramsDropdownLov
     */
    public ViewObjectImpl getMadeupAccProgramsDropdownLov() {
        return (ViewObjectImpl)findViewObject("MadeupAccProgramsDropdownLov");
    }

    /**
     * Container's getter for CopyBomSourceView.
     * @return CopyBomSourceView
     */
    public ViewObjectImpl getCopyBomSourceView() {
        return (ViewObjectImpl)findViewObject("CopyBomSourceView");
    }

    /**
     * Container's getter for CopyBomDestinationView.
     * @return CopyBomDestinationView
     */
    public ViewObjectImpl getCopyBomDestinationView() {
        return (ViewObjectImpl)findViewObject("CopyBomDestinationView");
    }


    public enum MeasuringSystem {
        Ne,
        D,
        Nm,
        Tex,
        Grex,
        NoneOfThem;
    }

    public ViewObject getFilteredVo(ViewObject vo, String where) {
        vo.setWhereClause(where);
        vo.executeQuery();
        return vo;
    }

    public int getMaxAtchCode(int type) {
        int code = 0;
        String sql =
            "BEGIN   ? := XXPM_GET_MAX_ATCH_CODE(" + type + ");  END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.registerOutParameter(1, Types.NUMERIC);
            stmt.executeUpdate();
            code = stmt.getInt(1);
        } catch (Exception e) {
            code = 0;
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return code;
    }


    public int addVsetVal(String prefix, String vSet, String value) {
        int result = 3;
        String query =
            "BEGIN XXPM_ADD_VSET_VAL_PROC(:D_PREFIX, :D_VSET_NAME, :D_VALUE, :D_ERR); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        logger.warning("prefix ===== " + prefix);
        logger.warning("vSet ===== " + vSet);
        logger.warning("vSet value ===== " + value);
        try {
            stmt.setString("D_PREFIX", prefix);
            stmt.setString("D_VSET_NAME", vSet);
            stmt.setString("D_VALUE", value);
            stmt.registerOutParameter("D_ERR", Types.NUMERIC);
            stmt.executeUpdate();
            result = stmt.getInt("D_ERR");
        } catch (SQLException e) {
            e.printStackTrace();
            result = 3;
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        logger.warning("Result for addVsetVal ===== " + result);
        return result;
    }

    public int chkSpnItmUsage(String vId) {
        int result = 0;
        String query =
            "BEGIN :VAL := XXPM_CHK_SPN_ITM_USAGE_FUNC ( :V_ID); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.registerOutParameter("VAL", Types.INTEGER);
            stmt.setString("V_ID", vId);
            stmt.execute();
            result = stmt.getInt("VAL");
        } catch (Exception e) {
            result = -1;
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return result;
    }

    public int chkCustSeg2VAlidity(String seg2) {
        int result = 0;
        String query =
            "BEGIN :VAL := XXPM_CHK_CUST_SEG2_VALID_FUNC ( :SEG2); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.registerOutParameter("VAL", Types.INTEGER);
            stmt.setString("SEG2", seg2);
            stmt.execute();
            result = stmt.getInt("VAL");
        } catch (Exception e) {
            result = -1;
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return result;
    }

    public void setXxpmAttachments(ViewObject fileVo, int fileCode,
                                   String name, String path, String ext) {
        Row newRow = fileVo.createRow();
        newRow.setAttribute("FileCode", fileCode);
        newRow.setAttribute("FileName", name);
        newRow.setAttribute("Path", path);
        newRow.setAttribute("FileExt", ext);
        fileVo.insertRow(newRow);
        this.getDBTransaction().commit();
        fileVo.executeQuery();
    }

    public void setXxpmAttachmentsSpn(int fileCode, String name, String path,
                                      String ext) {
        setXxpmAttachments(this.getXxpmAttachmentsViewChild(), fileCode, name,
                           path, ext);
    }

    public void setXxpmAttachmentsWv(int fileCode, String name, String path,
                                     String ext) {
        setXxpmAttachments(this.getXxpmAttachmentsViewChildWv(), fileCode,
                           name, path, ext);
    }

    public void setXxpmAttachmentsAcc(int fileCode, String name, String path,
                                      String ext) {
        setXxpmAttachments(this.getXxpmAttachmentsViewChildAcc(), fileCode,
                           name, path, ext);
    }

    public void setXxpmAttachmentsProg(int fileCode, String name, String path,
                                       String ext) {
        setXxpmAttachments(this.getXxpmAttachmentsViewChildProg(), fileCode,
                           name, path, ext);
    }

    /* public Object NVL(Object input, Object output) {
        Object result = "";
        if (input != null) {
            result = input;
        } else {
            result = output;
        }
        return result;
    } */

    public void copySpnItem() {
        ViewObject spnVo = this.getXxpmItemMasterSpnView();
        ViewObject ybVo = this.getXxpmYarnBlendViewChild();
        ViewObject ytVo = this.getXxpmYarnTypeViewChild();

        Row[] ybRows = ybVo.getAllRowsInRange();
        Row[] ytRows = ytVo.getAllRowsInRange();

        Row spnCurRow = null;
        Row ybCurRow = null;
        Row ytCurRow = null;

        Row spnNewRow = null;
        Row ybNewRow = null;
        Row ytNewRow = null;

        spnCurRow = spnVo.getCurrentRow();
        if (spnCurRow != null) {

            spnNewRow = spnVo.createRow();

            spnNewRow.setAttribute("YarnCount",
                                   spnCurRow.getAttribute("YarnCount"));
            spnNewRow.setAttribute("YarnPlies",
                                   spnCurRow.getAttribute("YarnPlies"));
            spnNewRow.setAttribute("YarnType",
                                   spnCurRow.getAttribute("YarnType"));
            spnNewRow.setAttribute("MeasuringSystem",
                                   spnCurRow.getAttribute("MeasuringSystem"));
            spnNewRow.setAttribute("YarnStatus",
                                   spnCurRow.getAttribute("YarnStatus"));
            spnNewRow.setAttribute("ItemStatusFlag",
                                   spnCurRow.getAttribute("ItemStatusFlag"));
            spnNewRow.setAttribute("Segment1",
                                   spnCurRow.getAttribute("Segment1"));
            /* spnNewRow.setAttribute("Segment2",
                                   spnCurRow.getAttribute("Segment2")); */
            spnNewRow.setAttribute("Segment3",
                                   spnCurRow.getAttribute("Segment3"));
            spnNewRow.setAttribute("Segment4",
                                   spnCurRow.getAttribute("Segment4"));
            spnNewRow.setAttribute("Segment5",
                                   spnCurRow.getAttribute("Segment5"));
            spnNewRow.setAttribute("Segment6",
                                   spnCurRow.getAttribute("Segment6"));
            spnNewRow.setAttribute("Segment7",
                                   spnCurRow.getAttribute("Segment7"));
            spnNewRow.setAttribute("YarnOutput",
                                   spnCurRow.getAttribute("YarnOutput"));
            spnNewRow.setAttribute("Dyed", spnCurRow.getAttribute("Dyed"));
            spnNewRow.setAttribute("DyeColor",
                                   spnCurRow.getAttribute("DyeColor"));
            spnNewRow.setAttribute("DyeColorNameTrans",
                                   spnCurRow.getAttribute("DyeColorNameTrans"));
            spnNewRow.setAttribute("RefLotNum",
                                   spnCurRow.getAttribute("RefLotNum"));

            spnVo.insertRow(spnNewRow);

            for (int i = 0; i < ybRows.length; i++) {
                ybCurRow = ybRows[i];
                if (ybCurRow != null) {

                    ybNewRow = ybVo.createRow();

                    ybNewRow.setAttribute("Cotton",
                                          ybCurRow.getAttribute("Cotton"));
                    ybNewRow.setAttribute("CottonRatio",
                                          ybCurRow.getAttribute("CottonRatio"));
                    ybNewRow.setAttribute("Fiber",
                                          ybCurRow.getAttribute("Fiber"));
                    ybNewRow.setAttribute("FiberRatio",
                                          ybCurRow.getAttribute("FiberRatio"));
                    ybVo.insertRow(ybNewRow);
                }
            }

            for (int i = 0; i < ytRows.length; i++) {

                ytCurRow = ytRows[i];

                if (ytCurRow != null) {

                    ytNewRow = ytVo.createRow();

                    ytNewRow.setAttribute("FancyYarnType",
                                          ytCurRow.getAttribute("FancyYarnType"));
                    ytNewRow.setAttribute("FytRatio",
                                          ytCurRow.getAttribute("FytRatio"));
                    ytNewRow.setAttribute("SlubCode",
                                          ytCurRow.getAttribute("SlubCode"));
                    ytNewRow.setAttribute("Denier1",
                                          ytCurRow.getAttribute("Denier1"));
                    ytNewRow.setAttribute("Denier2",
                                          ytCurRow.getAttribute("Denier2"));
                    ytNewRow.setAttribute("Draft1",
                                          ytCurRow.getAttribute("Draft1"));
                    ytNewRow.setAttribute("Draft2",
                                          ytCurRow.getAttribute("Draft2"));
                    ytNewRow.setAttribute("DualCore",
                                          ytCurRow.getAttribute("DualCore"));
                    ytNewRow.setAttribute("FancyYarnType2",
                                          ytCurRow.getAttribute("FancyYarnType2"));
                    ytNewRow.setAttribute("FytRatio2",
                                          ytCurRow.getAttribute("FytRatio2"));
                    ytNewRow.setAttribute("NewRow", 1);
                    ytVo.insertRow(ytNewRow);
                }
            }
        }

    }

    public void copyWvItem() {
        ViewObject wvVo = this.getXxpmItemMasterWvView();
        ViewObject warpVo = this.getXxpmWarpViewChild();
        ViewObject weftVo = this.getXxpmWeftViewChild();

        Row[] warpRows = warpVo.getAllRowsInRange();
        Row[] weftRows = weftVo.getAllRowsInRange();

        Row wvCurRow = null;
        Row warpCurRow = null;
        Row weftCurRow = null;

        Row wvNewRow = null;
        Row warpNewRow = null;
        Row weftNewRow = null;

        wvCurRow = wvVo.getCurrentRow();
        if (wvCurRow != null) {

            wvNewRow = wvVo.createRow();

            wvNewRow.setAttribute("Ends", wvCurRow.getAttribute("Ends"));
            wvNewRow.setAttribute("Picks", wvCurRow.getAttribute("Picks"));
            wvNewRow.setAttribute("Width", wvCurRow.getAttribute("Width"));
            wvNewRow.setAttribute("Weave", wvCurRow.getAttribute("Weave"));
            wvNewRow.setAttribute("Direction",
                                  wvCurRow.getAttribute("Direction"));
            wvNewRow.setAttribute("Design", wvCurRow.getAttribute("Design"));
            /* wvNewRow.setAttribute("WeaveSize",
                                  wvCurRow.getAttribute("WeaveSize")); */
            wvNewRow.setAttribute("Insertion",
                                  wvCurRow.getAttribute("Insertion"));
            wvNewRow.setAttribute("SelvedgeType",
                                  wvCurRow.getAttribute("SelvedgeType"));
            wvNewRow.setAttribute("WarpContraction",
                                  wvCurRow.getAttribute("WarpContraction"));
            wvNewRow.setAttribute("WeftContraction",
                                  wvCurRow.getAttribute("WeftContraction"));
            wvNewRow.setAttribute("ItemStatusFlag",
                                  wvCurRow.getAttribute("ItemStatusFlag"));
            wvNewRow.setAttribute("Segment1",
                                  wvCurRow.getAttribute("Segment1"));
            /* wvNewRow.setAttribute("Segment2",
                                  wvCurRow.getAttribute("Segment2")); */
            wvNewRow.setAttribute("Segment3",
                                  wvCurRow.getAttribute("Segment3"));
            wvNewRow.setAttribute("Segment4",
                                  wvCurRow.getAttribute("Segment4"));
            wvNewRow.setAttribute("Segment5",
                                  wvCurRow.getAttribute("Segment5"));
            wvNewRow.setAttribute("Segment6",
                                  wvCurRow.getAttribute("Segment6"));
            wvNewRow.setAttribute("Segment7",
                                  wvCurRow.getAttribute("Segment7"));

            wvVo.insertRow(wvNewRow);

            for (int i = 0; i < warpRows.length; i++) {
                warpCurRow = warpRows[i];
                if (warpCurRow != null) {

                    warpNewRow = warpVo.createRow();

                    warpNewRow.setAttribute("Segment2",
                                            warpCurRow.getAttribute("Segment2"));
                    warpNewRow.setAttribute("BaseImId",
                                            warpCurRow.getAttribute("BaseImId"));
                    warpVo.insertRow(warpNewRow);
                }
            }

            for (int i = 0; i < weftRows.length; i++) {

                weftCurRow = weftRows[i];

                if (weftCurRow != null) {

                    weftNewRow = weftVo.createRow();

                    weftNewRow.setAttribute("Segment2",
                                            weftCurRow.getAttribute("Segment2"));
                    weftNewRow.setAttribute("BaseImId",
                                            weftCurRow.getAttribute("BaseImId"));
                    weftVo.insertRow(weftNewRow);
                }
            }
        }

    }

    public void copyDyItem() {
        ViewObject dyVo = this.getXxpmItemMasterDyView();

        Row dyCurRow = null;

        Row dyNewRow = null;

        dyCurRow = dyVo.getCurrentRow();
        if (dyCurRow != null) {

            dyNewRow = dyVo.createRow();

            dyNewRow.setAttribute("BaseImId",
                                  dyCurRow.getAttribute("BaseImId"));
            dyNewRow.setAttribute("ItemStatusFlag",
                                  dyCurRow.getAttribute("ItemStatusFlag"));
            dyNewRow.setAttribute("Segment1",
                                  dyCurRow.getAttribute("Segment1"));
            /* dyNewRow.setAttribute("Segment2",
                                  dyCurRow.getAttribute("Segment2")); */
            dyNewRow.setAttribute("Segment3",
                                  dyCurRow.getAttribute("Segment3"));
            dyNewRow.setAttribute("Segment4",
                                  dyCurRow.getAttribute("Segment4"));
            dyNewRow.setAttribute("Segment5",
                                  dyCurRow.getAttribute("Segment5"));
            dyNewRow.setAttribute("Segment6",
                                  dyCurRow.getAttribute("Segment6"));
            dyNewRow.setAttribute("Segment7",
                                  dyCurRow.getAttribute("Segment7"));
            dyNewRow.setAttribute("Category",
                                  dyCurRow.getAttribute("Category"));
            dyNewRow.setAttribute("FinishType",
                                  dyCurRow.getAttribute("FinishType"));
            dyNewRow.setAttribute("WvDescription",
                                  dyCurRow.getAttribute("WvDescription"));

            dyVo.insertRow(dyNewRow);
        }

    }

    public void copyPrnItem() {
        ViewObject prnVo = this.getXxpmItemMasterPrnView();

        Row prnCurRow = null;

        Row prnNewRow = null;

        prnCurRow = prnVo.getCurrentRow();
        if (prnCurRow != null) {

            prnNewRow = prnVo.createRow();

            prnNewRow.setAttribute("BaseImId",
                                   prnCurRow.getAttribute("BaseImId"));
            prnNewRow.setAttribute("ItemStatusFlag",
                                   prnCurRow.getAttribute("ItemStatusFlag"));
            prnNewRow.setAttribute("Segment1",
                                   prnCurRow.getAttribute("Segment1"));
            /* prnNewRow.setAttribute("Segment2",
                                   prnCurRow.getAttribute("Segment2")); */
            prnNewRow.setAttribute("Segment3",
                                   prnCurRow.getAttribute("Segment3"));
            prnNewRow.setAttribute("Segment4",
                                   prnCurRow.getAttribute("Segment4"));
            prnNewRow.setAttribute("Segment5",
                                   prnCurRow.getAttribute("Segment5"));
            prnNewRow.setAttribute("Segment6",
                                   prnCurRow.getAttribute("Segment6"));
            prnNewRow.setAttribute("Segment7",
                                   prnCurRow.getAttribute("Segment7"));
            prnNewRow.setAttribute("Category",
                                   prnCurRow.getAttribute("Category"));
            prnNewRow.setAttribute("FinishType",
                                   prnCurRow.getAttribute("FinishType"));
            prnNewRow.setAttribute("BaseDye",
                                   prnCurRow.getAttribute("BaseDye"));
            prnNewRow.setAttribute("EngravedNum",
                                   prnCurRow.getAttribute("EngravedNum"));
            prnNewRow.setAttribute("TransWeavingDesc",
                                   prnCurRow.getAttribute("TransWeavingDesc"));
            prnVo.insertRow(prnNewRow);
        }
    }

    public void copyAccItem() {
        ViewObject accVo = this.getXxpmItemMasterAccView();

        Row accCurRow = null;

        Row accNewRow = null;

        accCurRow = accVo.getCurrentRow();
        if (accCurRow != null) {
            accNewRow = accVo.createRow();
            accNewRow.setAttribute("Segment1",
                                   accCurRow.getAttribute("Segment1"));
            accNewRow.setAttribute("Segment3",
                                   accCurRow.getAttribute("Segment3"));
            accNewRow.setAttribute("Segment4",
                                   accCurRow.getAttribute("Segment4"));
            accNewRow.setAttribute("Segment5",
                                   accCurRow.getAttribute("Segment5"));
            accNewRow.setAttribute("Segment6",
                                   accCurRow.getAttribute("Segment6"));
            accNewRow.setAttribute("Segment7",
                                   accCurRow.getAttribute("Segment7"));
            accNewRow.setAttribute("BgBagDimensions",
                                   accCurRow.getAttribute("BgBagDimensions"));
            accNewRow.setAttribute("BgBagMaterial",
                                   accCurRow.getAttribute("BgBagMaterial"));
            accNewRow.setAttribute("BgBagPocket",
                                   accCurRow.getAttribute("BgBagPocket"));
            accNewRow.setAttribute("BgBagType",
                                   accCurRow.getAttribute("BgBagType"));
            accNewRow.setAttribute("BgBpLength",
                                   accCurRow.getAttribute("BgBpLength"));
            accNewRow.setAttribute("BgBpWidth",
                                   accCurRow.getAttribute("BgBpWidth"));
            accNewRow.setAttribute("BgBtnColor",
                                   accCurRow.getAttribute("BgBtnColor"));
            accNewRow.setAttribute("BgBtnMaterial",
                                   accCurRow.getAttribute("BgBtnMaterial"));
            accNewRow.setAttribute("BgFlap", accCurRow.getAttribute("BgFlap"));
            accNewRow.setAttribute("BgFpLength",
                                   accCurRow.getAttribute("BgFpLength"));
            accNewRow.setAttribute("BgFpWidth",
                                   accCurRow.getAttribute("BgFpWidth"));
            accNewRow.setAttribute("BgGusset",
                                   accCurRow.getAttribute("BgGusset"));
            accNewRow.setAttribute("BgMaterialGuage",
                                   accCurRow.getAttribute("BgMaterialGuage"));
            accNewRow.setAttribute("BgMaterialSpecs",
                                   accCurRow.getAttribute("BgMaterialSpecs"));
            accNewRow.setAttribute("BgPrintType",
                                   accCurRow.getAttribute("BgPrintType"));
            accNewRow.setAttribute("BgZipColor",
                                   accCurRow.getAttribute("BgZipColor"));
            accNewRow.setAttribute("BgZipMaterial",
                                   accCurRow.getAttribute("BgZipMaterial"));
            accNewRow.setAttribute("BgZipSize",
                                   accCurRow.getAttribute("BgZipSize"));
            accNewRow.setAttribute("InsDimensions",
                                   accCurRow.getAttribute("InsDimensions"));
            accNewRow.setAttribute("InsFixType",
                                   accCurRow.getAttribute("InsFixType"));
            accNewRow.setAttribute("InsGusset",
                                   accCurRow.getAttribute("InsGusset"));
            accNewRow.setAttribute("InsInsertType",
                                   accCurRow.getAttribute("InsInsertType"));
            accNewRow.setAttribute("InsLamination",
                                   accCurRow.getAttribute("InsLamination"));
            accNewRow.setAttribute("InsMaterialGsm",
                                   accCurRow.getAttribute("InsMaterialGsm"));
            accNewRow.setAttribute("InsPaperType",
                                   accCurRow.getAttribute("InsPaperType"));
            accNewRow.setAttribute("InsVarnish",
                                   accCurRow.getAttribute("InsVarnish"));
            accNewRow.setAttribute("StfGusset1",
                                   accCurRow.getAttribute("StfGusset1"));
            accNewRow.setAttribute("StfGusset2",
                                   accCurRow.getAttribute("StfGusset2"));
            accNewRow.setAttribute("StfMaterial",
                                   accCurRow.getAttribute("StfMaterial"));
            accNewRow.setAttribute("StfPly", accCurRow.getAttribute("StfPly"));
            accNewRow.setAttribute("StfStifnerType",
                                   accCurRow.getAttribute("StfStifnerType"));
            accNewRow.setAttribute("CrtBusting",
                                   accCurRow.getAttribute("CrtBusting"));
            accNewRow.setAttribute("CrtCartonType",
                                   accCurRow.getAttribute("CrtCartonType"));
            accNewRow.setAttribute("CrtEct", accCurRow.getAttribute("CrtEct"));
            accNewRow.setAttribute("CrtInnDimensions",
                                   accCurRow.getAttribute("CrtInnDimensions"));
            accNewRow.setAttribute("CrtInnHeight",
                                   accCurRow.getAttribute("CrtInnHeight"));
            accNewRow.setAttribute("CrtInnLength",
                                   accCurRow.getAttribute("CrtInnLength"));
            accNewRow.setAttribute("CrtInnUom",
                                   accCurRow.getAttribute("CrtInnUom"));
            accNewRow.setAttribute("CrtInnWidth",
                                   accCurRow.getAttribute("CrtInnWidth"));
            accNewRow.setAttribute("CrtMaterial",
                                   accCurRow.getAttribute("CrtMaterial"));
            accNewRow.setAttribute("CrtOutDimensions",
                                   accCurRow.getAttribute("CrtOutDimensions"));
            accNewRow.setAttribute("CrtOutHeight",
                                   accCurRow.getAttribute("CrtOutHeight"));
            accNewRow.setAttribute("CrtOutLength",
                                   accCurRow.getAttribute("CrtOutLength"));
            accNewRow.setAttribute("CrtOutUom",
                                   accCurRow.getAttribute("CrtOutUom"));
            accNewRow.setAttribute("CrtOutWidth",
                                   accCurRow.getAttribute("CrtOutWidth"));
            accNewRow.setAttribute("CrtPly", accCurRow.getAttribute("CrtPly"));
            accNewRow.setAttribute("CrtPrintType",
                                   accCurRow.getAttribute("CrtPrintType"));
            accNewRow.setAttribute("CrtPrintedType",
                                   accCurRow.getAttribute("CrtPrintedType"));
            accNewRow.setAttribute("LblFoldLength",
                                   accCurRow.getAttribute("LblFoldLength"));
            accNewRow.setAttribute("LblFoldSize",
                                   accCurRow.getAttribute("LblFoldSize"));
            accNewRow.setAttribute("LblFoldSwingMargin",
                                   accCurRow.getAttribute("LblFoldSwingMargin"));
            accNewRow.setAttribute("LblFoldWidth",
                                   accCurRow.getAttribute("LblFoldWidth"));
            accNewRow.setAttribute("LblFoldingType",
                                   accCurRow.getAttribute("LblFoldingType"));
            accNewRow.setAttribute("LblLableType",
                                   accCurRow.getAttribute("LblLableType"));
            accNewRow.setAttribute("LblMaterial",
                                   accCurRow.getAttribute("LblMaterial"));
            accNewRow.setAttribute("LblPlainLength",
                                   accCurRow.getAttribute("LblPlainLength"));
            accNewRow.setAttribute("LblPlainSize",
                                   accCurRow.getAttribute("LblPlainSize"));
            accNewRow.setAttribute("LblPlainSwingMargin",
                                   accCurRow.getAttribute("LblPlainSwingMargin"));
            accNewRow.setAttribute("LblPlainWidth",
                                   accCurRow.getAttribute("LblPlainWidth"));
            accNewRow.setAttribute("ZipMaterialType",
                                   accCurRow.getAttribute("ZipMaterialType"));
            accNewRow.setAttribute("ZipTeethType",
                                   accCurRow.getAttribute("ZipTeethType"));
            accNewRow.setAttribute("ZipUom", accCurRow.getAttribute("ZipUom"));
            accNewRow.setAttribute("ThrMaterial",
                                   accCurRow.getAttribute("ThrMaterial"));
            accNewRow.setAttribute("ThrTexSizePly",
                                   accCurRow.getAttribute("ThrTexSizePly"));
            accNewRow.setAttribute("ThrThreadType",
                                   accCurRow.getAttribute("ThrThreadType"));
            accNewRow.setAttribute("ThrThreadUsage",
                                   accCurRow.getAttribute("ThrThreadUsage"));
            accNewRow.setAttribute("ElsCordType",
                                   accCurRow.getAttribute("ElsCordType"));
            accNewRow.setAttribute("ElsElasticType",
                                   accCurRow.getAttribute("ElsElasticType"));
            accNewRow.setAttribute("ElsRatio",
                                   accCurRow.getAttribute("ElsRatio"));
            accNewRow.setAttribute("CtcDiaThickness",
                                   accCurRow.getAttribute("CtcDiaThickness"));
            accNewRow.setAttribute("CtcMaterial",
                                   accCurRow.getAttribute("CtcMaterial"));
            accNewRow.setAttribute("FusGsm", accCurRow.getAttribute("FusGsm"));
            accNewRow.setAttribute("FusMaterial",
                                   accCurRow.getAttribute("FusMaterial"));
            accNewRow.setAttribute("NwvGsm", accCurRow.getAttribute("NwvGsm"));
            accNewRow.setAttribute("NwvMaterial",
                                   accCurRow.getAttribute("NwvMaterial"));
            accNewRow.setAttribute("WdGsm", accCurRow.getAttribute("WdGsm"));
            accNewRow.setAttribute("WdLoaft",
                                   accCurRow.getAttribute("WdLoaft"));
            accNewRow.setAttribute("WdMaterial",
                                   accCurRow.getAttribute("WdMaterial"));
            accNewRow.setAttribute("WdRatio",
                                   accCurRow.getAttribute("WdRatio"));
            accNewRow.setAttribute("BfMaterial",
                                   accCurRow.getAttribute("BfMaterial"));
            accNewRow.setAttribute("BfMaterialType",
                                   accCurRow.getAttribute("BfMaterialType"));
            accNewRow.setAttribute("BtnButtonColor",
                                   accCurRow.getAttribute("BtnButtonColor"));
            accNewRow.setAttribute("BtnButtonMaterial",
                                   accCurRow.getAttribute("BtnButtonMaterial"));
            accNewRow.setAttribute("BtnButtonSize",
                                   accCurRow.getAttribute("BtnButtonSize"));
            accNewRow.setAttribute("BtnButtonType",
                                   accCurRow.getAttribute("BtnButtonType"));
            accNewRow.setAttribute("BtnHolesNum",
                                   accCurRow.getAttribute("BtnHolesNum"));
            accNewRow.setAttribute("PprPaperColor",
                                   accCurRow.getAttribute("PprPaperColor"));
            accNewRow.setAttribute("PprPaperMaterial",
                                   accCurRow.getAttribute("PprPaperMaterial"));
            accNewRow.setAttribute("StkColor",
                                   accCurRow.getAttribute("StkColor"));
            accNewRow.setAttribute("StkMaterial",
                                   accCurRow.getAttribute("StkMaterial"));
            accNewRow.setAttribute("StkPeelableType",
                                   accCurRow.getAttribute("StkPeelableType"));
            accNewRow.setAttribute("StkPerforatedType",
                                   accCurRow.getAttribute("StkPerforatedType"));
            accNewRow.setAttribute("StkStickerType",
                                   accCurRow.getAttribute("StkStickerType"));
            accNewRow.setAttribute("StkText",
                                   accCurRow.getAttribute("StkText"));
            accNewRow.setAttribute("SgItem", accCurRow.getAttribute("SgItem"));
            accNewRow.setAttribute("SgWeight",
                                   accCurRow.getAttribute("SgWeight"));
            accNewRow.setAttribute("TpColor",
                                   accCurRow.getAttribute("TpColor"));
            accNewRow.setAttribute("TpMaterialType",
                                   accCurRow.getAttribute("TpMaterialType"));
            accNewRow.setAttribute("LacColor",
                                   accCurRow.getAttribute("LacColor"));
            accNewRow.setAttribute("LacMaterial",
                                   accCurRow.getAttribute("LacMaterial"));
            accNewRow.setAttribute("LacType",
                                   accCurRow.getAttribute("LacType"));
            accNewRow.setAttribute("LacUom", accCurRow.getAttribute("LacUom"));
            accNewRow.setAttribute("EyColor",
                                   accCurRow.getAttribute("EyColor"));
            accNewRow.setAttribute("EyFinish",
                                   accCurRow.getAttribute("EyFinish"));
            accNewRow.setAttribute("EyMaterial",
                                   accCurRow.getAttribute("EyMaterial"));
            accNewRow.setAttribute("HngHookType",
                                   accCurRow.getAttribute("HngHookType"));
            accNewRow.setAttribute("HngMaterialCombination",
                                   accCurRow.getAttribute("HngMaterialCombination"));
            accNewRow.setAttribute("HngThickness",
                                   accCurRow.getAttribute("HngThickness"));
            accNewRow.setAttribute("HngThicknessUom",
                                   accCurRow.getAttribute("HngThicknessUom"));
            accNewRow.setAttribute("StrDescription",
                                   accCurRow.getAttribute("StrDescription"));
            accNewRow.setAttribute("TapMaterial",
                                   accCurRow.getAttribute("TapMaterial"));
            accNewRow.setAttribute("TapPrintText",
                                   accCurRow.getAttribute("TapPrintText"));
            accNewRow.setAttribute("AccAccessoryType",
                                   accCurRow.getAttribute("AccAccessoryType"));
            accNewRow.setAttribute("AccDiameter",
                                   accCurRow.getAttribute("AccDiameter"));
            accNewRow.setAttribute("AccDiameterUom",
                                   accCurRow.getAttribute("AccDiameterUom"));
            accNewRow.setAttribute("AccHeight",
                                   accCurRow.getAttribute("AccHeight"));
            accNewRow.setAttribute("AccHeightUom",
                                   accCurRow.getAttribute("AccHeightUom"));
            accNewRow.setAttribute("AccLength",
                                   accCurRow.getAttribute("AccLength"));
            accNewRow.setAttribute("AccLength1",
                                   accCurRow.getAttribute("AccLength1"));
            accNewRow.setAttribute("AccLength1Uom",
                                   accCurRow.getAttribute("AccLength1Uom"));
            accNewRow.setAttribute("AccLength2",
                                   accCurRow.getAttribute("AccLength2"));
            accNewRow.setAttribute("AccLength2Uom",
                                   accCurRow.getAttribute("AccLength2Uom"));
            accNewRow.setAttribute("AccLengthUom",
                                   accCurRow.getAttribute("AccLengthUom"));
            accNewRow.setAttribute("AccListPrice",
                                   accCurRow.getAttribute("AccListPrice"));
            accNewRow.setAttribute("AccRemarks",
                                   accCurRow.getAttribute("AccRemarks"));
            accNewRow.setAttribute("AccWastage",
                                   accCurRow.getAttribute("AccWastage"));
            accNewRow.setAttribute("AccWidth",
                                   accCurRow.getAttribute("AccWidth"));
            accNewRow.setAttribute("AccWidth1",
                                   accCurRow.getAttribute("AccWidth1"));
            accNewRow.setAttribute("AccWidth1Uom",
                                   accCurRow.getAttribute("AccWidth1Uom"));
            accNewRow.setAttribute("AccWidth2",
                                   accCurRow.getAttribute("AccWidth2"));
            accNewRow.setAttribute("AccWidth2Uom",
                                   accCurRow.getAttribute("AccWidth2Uom"));
            accNewRow.setAttribute("AccWidthUom",
                                   accCurRow.getAttribute("AccWidthUom"));
            accNewRow.setAttribute("CtcItemType",
                                   accCurRow.getAttribute("CtcItemType"));
            accNewRow.setAttribute("ItemStatusFlag",
                                   accCurRow.getAttribute("ItemStatusFlag"));
            accNewRow.setAttribute("AccTypeValueDisplay",
                                   accCurRow.getAttribute("AccTypeValueDisplay"));
            accNewRow.setAttribute("BagDimensionsTrans",
                                   accCurRow.getAttribute("BagDimensionsTrans"));
            accNewRow.setAttribute("BagSizeTrans",
                                   accCurRow.getAttribute("BagSizeTrans"));
            accNewRow.setAttribute("BagResultantTrans",
                                   accCurRow.getAttribute("BagResultantTrans"));
            accNewRow.setAttribute("ProgramNameDesc",
                                   accCurRow.getAttribute("ProgramNameDesc"));
            accNewRow.setAttribute("InsDimensionsTrans",
                                   accCurRow.getAttribute("InsDimensionsTrans"));
            accNewRow.setAttribute("InsSizeTrans",
                                   accCurRow.getAttribute("InsSizeTrans"));
            accNewRow.setAttribute("InsResultantTrans",
                                   accCurRow.getAttribute("InsResultantTrans"));
            accNewRow.setAttribute("StfSizeTrans",
                                   accCurRow.getAttribute("StfSizeTrans"));
            accNewRow.setAttribute("StfResultantTrans",
                                   accCurRow.getAttribute("StfResultantTrans"));
            accNewRow.setAttribute("CrtOutDimensionTrans",
                                   accCurRow.getAttribute("CrtOutDimensionTrans"));
            accNewRow.setAttribute("CrtInDimensionTrans",
                                   accCurRow.getAttribute("CrtInDimensionTrans"));
            accNewRow.setAttribute("CrtSizeTrans",
                                   accCurRow.getAttribute("CrtSizeTrans"));
            accNewRow.setAttribute("CrtResultantTrans",
                                   accCurRow.getAttribute("CrtResultantTrans"));
            accNewRow.setAttribute("LblPlainSizeTrans",
                                   accCurRow.getAttribute("LblPlainSizeTrans"));
            accNewRow.setAttribute("LblFoldSizeTrans",
                                   accCurRow.getAttribute("LblFoldSizeTrans"));
            accNewRow.setAttribute("LblResultantTrans",
                                   accCurRow.getAttribute("LblResultantTrans"));
            accNewRow.setAttribute("ZipResultantTrans",
                                   accCurRow.getAttribute("ZipResultantTrans"));
            accNewRow.setAttribute("ThrResultantTrans",
                                   accCurRow.getAttribute("ThrResultantTrans"));
            accNewRow.setAttribute("ElsResultantTrans",
                                   accCurRow.getAttribute("ElsResultantTrans"));
            accNewRow.setAttribute("CtcResultantTrans",
                                   accCurRow.getAttribute("CtcResultantTrans"));
            accNewRow.setAttribute("FusResultantTrans",
                                   accCurRow.getAttribute("FusResultantTrans"));
            accNewRow.setAttribute("NwvResultantTrans",
                                   accCurRow.getAttribute("NwvResultantTrans"));
            accNewRow.setAttribute("WdResultantTrans",
                                   accCurRow.getAttribute("WdResultantTrans"));
            accNewRow.setAttribute("BfResultantTrans",
                                   accCurRow.getAttribute("BfResultantTrans"));
            accNewRow.setAttribute("BtnResultantTrans",
                                   accCurRow.getAttribute("BtnResultantTrans"));
            accNewRow.setAttribute("PprResultantTrans",
                                   accCurRow.getAttribute("PprResultantTrans"));
            accNewRow.setAttribute("StkResultantTrans",
                                   accCurRow.getAttribute("StkResultantTrans"));
            accNewRow.setAttribute("SgResultantTrans",
                                   accCurRow.getAttribute("SgResultantTrans"));
            accNewRow.setAttribute("TpResultantTrans",
                                   accCurRow.getAttribute("TpResultantTrans"));
            accNewRow.setAttribute("TgResultantTrans",
                                   accCurRow.getAttribute("TgResultantTrans"));
            accNewRow.setAttribute("LacResultantTrans",
                                   accCurRow.getAttribute("LacResultantTrans"));
            accNewRow.setAttribute("EyResultantTrans",
                                   accCurRow.getAttribute("EyResultantTrans"));
            accNewRow.setAttribute("HngResultantTrans",
                                   accCurRow.getAttribute("HngResultantTrans"));
            accNewRow.setAttribute("PmResultantTrans",
                                   accCurRow.getAttribute("PmResultantTrans"));
            accNewRow.setAttribute("StrResultantTrans",
                                   accCurRow.getAttribute("StrResultantTrans"));
            accNewRow.setAttribute("TapResultantTrans",
                                   accCurRow.getAttribute("TapResultantTrans"));
            accNewRow.setAttribute("RowStatus",
                                   accCurRow.getAttribute("RowStatus"));
            accNewRow.setAttribute("AccItemUom",
                                   accCurRow.getAttribute("AccItemUom"));
            accNewRow.setAttribute("MinOrderQty",
                                   accCurRow.getAttribute("MinOrderQty"));
            accNewRow.setAttribute("AccCustVal",
                                   accCurRow.getAttribute("AccCustVal"));
            accNewRow.setAttribute("InsText",
                                   accCurRow.getAttribute("InsText"));
            accNewRow.setAttribute("CrtText",
                                   accCurRow.getAttribute("CrtText"));

            accVo.insertRow(accNewRow);
        }
    }

    public void copymadeupSetItem() {
        ViewObject setVo = this.getXxpmMadeupSetsViewChild();
        ViewObject saVo = this.getXxpmMadeupSetArticlesViewSetsChild();
        Row[] saRows = saVo.getAllRowsInRange();

        Row setCurRow = null;
        Row saCurRow = null;

        Row setNewRow = null;
        Row saNewRow = null;

        if (setVo != null) {
            setCurRow = setVo.getCurrentRow();
            if (setCurRow != null) {
                setNewRow = setVo.createRow();

                setNewRow.setAttribute("ProgId",
                                       setCurRow.getAttribute("ProgId"));
                setNewRow.setAttribute("SetName",
                                       setCurRow.getAttribute("SetName"));
                setNewRow.setAttribute("Segment1",
                                       setCurRow.getAttribute("Segment1"));
                setNewRow.setAttribute("Segment2",
                                       setCurRow.getAttribute("Segment2"));
                setNewRow.setAttribute("Segment3",
                                       setCurRow.getAttribute("Segment3"));
                setNewRow.setAttribute("Segment4",
                                       setCurRow.getAttribute("Segment4"));
                setNewRow.setAttribute("Segment5",
                                       setCurRow.getAttribute("Segment5"));
                setNewRow.setAttribute("Segment6",
                                       setCurRow.getAttribute("Segment6"));
                setNewRow.setAttribute("Segment7",
                                       setCurRow.getAttribute("Segment7"));
                //                setNewRow.setAttribute("Description",
                //                                       setCurRow.getAttribute("Description"));
                setNewRow.setAttribute("MadeupSetColor",
                                       setCurRow.getAttribute("MadeupSetColor"));
                setNewRow.setAttribute("MadeupSetSize",
                                       setCurRow.getAttribute("MadeupSetSize"));

                setVo.insertRow(setNewRow);

                for (int i = 0; i < saRows.length; i++) {
                    saCurRow = saRows[i];
                    saNewRow = saVo.createRow();

                    saNewRow.setAttribute("ArticleId",
                                          saCurRow.getAttribute("ArticleId"));
                    saNewRow.setAttribute("Quantity",
                                          saCurRow.getAttribute("Quantity"));
                    saVo.insertRow(saNewRow);
                }
            }
        }
    }

    public String getUserInfo(int type) {
        String result = null;
        result =
                (type == 1 ? (String)ADFContext.getCurrent().getSessionScope().get("userID") :
                 (type == 2 ?
                  (String)ADFContext.getCurrent().getSessionScope().get("respID") :
                  (String)ADFContext.getCurrent().getSessionScope().get("userName")));
        return result;
    }

    public int copyEBSItemUpdateStatus(String imId, String s3) {
        int successMsg = 0;
        String query =
            "BEGIN   XXPM_EBS_COPY_ITM_UPD_STS_PROC(:CUST_IM_ID, :S3, :USR, :RESP, :MSG, :SUCCESS_MSG);  END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.setString("CUST_IM_ID", imId);
            stmt.setString("S3", s3);
            stmt.setString("USR", getUserInfo(1));
            stmt.setString("RESP", getUserInfo(2));
            stmt.registerOutParameter("MSG", Types.VARCHAR);
            stmt.registerOutParameter("SUCCESS_MSG", Types.INTEGER);
            stmt.executeUpdate();
            logger.info("msg == " + stmt.getString("MSG"));
            logger.warning("msg == " + stmt.getString("MSG"));
            logger.info("SUCCESS MSG == " + stmt.getInt("SUCCESS_MSG"));
            logger.warning("SUCCESS MSG == " + stmt.getInt("SUCCESS_MSG"));
            successMsg = stmt.getInt("SUCCESS_MSG");
        } catch (Exception e1) {
            // TODO: Add catch code
            logger.warning("msg == ADF Error");
            successMsg = 0;
            logger.info(e1.getMessage());
            e1.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return successMsg;
    }

    public void genMadeupComb(String pid, String artId) {
        String sql =
            "BEGIN XXPM_MADEUP_COMBINATION_PKG.GEN_COMBINATION (:PID, :ART_ID); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.setString("PID", pid);
            stmt.setString("ART_ID", artId);
            stmt.executeUpdate();
        } catch (Exception e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    public String createMadeupItemInEBS(String pid) {
        String result = "";
        String sql =
            "BEGIN XXPM_MADEUP_COMBINATION_PKG.CREATE_ITEM_IN_EBS (:PID, :MSG, :ERR); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.setString("PID", pid);
            stmt.registerOutParameter("MSG", Types.VARCHAR);
            stmt.registerOutParameter("ERR", Types.VARCHAR);
            stmt.executeUpdate();
            logger.warning("MSG ===== " + stmt.getString("MSG"));
            result = stmt.getString("ERR");
        } catch (SQLException e) {
            result = "SQL Error in ADF method.";
            e.printStackTrace();

        } catch (Exception e) {
            result = "Error in ADF method.";
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        logger.warning("createMadeupItemInEBS result ===== " + result);
        return result;
    }

    public void delMadeupSetArticle(int articleId) {
        ViewObjectImpl vo = this.getXxpmMadeupSetArticlesView();

        String where1 = "ARTICLE_ID = " + articleId;
        vo.setWhereClause(where1);
        vo.executeQuery();
        Row curRow = null;

        while (vo.hasNext()) {
            curRow = vo.next();
            curRow.remove();
        }

        String where2 = "1 = 1";
        vo.setWhereClause(where2);
        vo.executeQuery();
    }

    //    public void insertArticleBomAccColorsSizes(String bom) {
    //        ViewObject masterVo = this.getXxpmArticleBomAccessoriesViewChild();
    //        ViewObject clrVo = this.getXxpmAbAccessoriesColorsViewChild();
    //        ViewObject sizeVo = this.getXxpmAbAccessoriesSizesViewChild();
    //
    //        String query =
    //            "BEGIN XXPM_ARTICLE_BOM_PKG.UPDATE_ACC_COLORS_SIZES_PROC (:BOM); END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.setString("BOM", bom);
    //            stmt.executeUpdate();
    //            if (masterVo != null) {
    //                masterVo.executeQuery();
    //                Row curRow = masterVo.first();
    //                if (curRow != null) {
    //                    masterVo.setCurrentRow(curRow);
    //                }
    //            }
    //            if (clrVo != null) {
    //                clrVo.executeQuery();
    //            }
    //            if (sizeVo != null) {
    //                sizeVo.executeQuery();
    //            }
    //        } catch (SQLException e) {
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }
    //
    //    public void insertArticleBomFabColorsSizes(String bom) {
    //        ViewObject masterVo = this.getXxpmArticleBomFabricViewChild();
    //        ViewObject clrVo = this.getXxpmAbFabricColorsViewChild();
    //        ViewObject sizeVo = this.getXxpmAbFabricSizesViewChild();
    //
    //        String query =
    //            "BEGIN XXPM_ARTICLE_BOM_PKG.UPDATE_FAB_COLORS_SIZES_PROC (:BOM); END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.setString("BOM", bom);
    //            stmt.executeUpdate();
    //            if (masterVo != null) {
    //                masterVo.executeQuery();
    //                Row curRow = masterVo.first();
    //                if (curRow != null) {
    //                    masterVo.setCurrentRow(curRow);
    //                }
    //            }
    //            if (clrVo != null) {
    //                clrVo.executeQuery();
    //            }
    //            if (sizeVo != null) {
    //                sizeVo.executeQuery();
    //            }
    //        } catch (SQLException e) {
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }

    public void updateArticleBomDetails(String bomId) {
        String query =
            "BEGIN XXPM_ARTICLE_BOM_PKG.UPDATE_ARTICLE_BOM_DTL_PROC (:BOM); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.setString("BOM", bomId);
            stmt.executeUpdate();
            this.getXxpmAbAccessoriesColorsViewChild().executeQuery();
            this.getXxpmAbAccessoriesSizesViewChild().executeQuery();
            this.getXxpmAbFabricColorsViewChild().executeQuery();
            this.getXxpmAbFabricSizesViewChild().executeQuery();
            this.getXxpmArticleBomAccessoriesViewChild().executeQuery();
            this.getXxpmArticleBomFabricViewChild().executeQuery();
        } catch (SQLException e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    //    public void updateAccColors(String bomId) {
    //        String query =
    //            "BEGIN XXPM_ARTICLE_BOM_PKG.UPDATE_ACC_COLORS_PROC (:BOM); END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.setString("BOM", bomId);
    //            stmt.executeUpdate();
    //        } catch (SQLException e) {
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }

    //    public void insertAccItemIntoEbs() {
    //        String query =
    //            "BEGIN XXPM_ARTICLE_BOM_PKG.INS_ACC_ITM_INTO_EBS_PROC; END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.execute();
    //        } catch (SQLException e) {
    //            logger.info("insertAccItemIntoEbs result ===== " +
    //                             e.getMessage());
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }

    //    public void updateArticleBomFabCombs(String bomId) {
    //        String query =
    //            "BEGIN XXPM_ARTICLE_BOM_PKG.UPDATE_AB_FAB_COMBS_PROC (:BOM); END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.setString("BOM", bomId);
    //            stmt.executeUpdate();
    //        } catch (SQLException e) {
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }

    //    public void updateArticleBomAccCombs(String bomId) {
    //        String query =
    //            "BEGIN XXPM_ARTICLE_BOM_PKG.UPDATE_AB_ACC_COMBS_PROC (:BOM); END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.setString("BOM", bomId);
    //            stmt.executeUpdate();
    //        } catch (SQLException e) {
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }

    public int createArticleBom(String bomId) {
        int successMsg = 0;
        String sql = "BEGIN XXPM_ARTICLE_BOM_PROC(?, ?, ?, ?); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.registerOutParameter(4, Types.INTEGER);
            stmt.setString(1, bomId);
            stmt.setString(2, getUserInfo(1));
            stmt.setString(3, getUserInfo(2));
            logger.warning("BOM = " + bomId);
            logger.warning("V_USER = " + getUserInfo(1));
            logger.warning("V_RESP = " + getUserInfo(2));
            stmt.execute();
            successMsg = stmt.getInt(4);
        } catch (Exception e) {
            e.printStackTrace();
            successMsg = 0;
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return successMsg;
    }

    public int articleBomProc(String bomId) {
        int result = 0;
        logger.warning("createArticleBom method of Article BOM started at " +
                       new Date());
        result = createArticleBom(bomId);
        logger.warning("createArticleBom method of Article BOM end at " +
                       new Date());
        return result;
    }

    public Integer saleOrderBomsStatus(Integer hid) {
        Integer result = null;
        String sql = "BEGIN :RESULT := XXPM_SO_BOMS_STATUS(:HID); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.registerOutParameter("RESULT", Types.INTEGER);
            stmt.setInt("HID", hid);
            stmt.execute();
            result = stmt.getInt("RESULT");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return result;
    }

    public void insertPoLines(Integer prog, Integer hid, Integer poId,
                              Integer transType) {
        String query =
            "BEGIN XXPM_PO_PKG.GET_PO_ITEMS_FROM_BOM(:PROG, :HID, :POID, :TRANS_TYPE); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.setInt("PROG", prog);
            stmt.setInt("HID", hid);
            stmt.setInt("POID", poId);
            stmt.setInt("TRANS_TYPE", transType);
            stmt.executeUpdate();
            this.getXxpmPoLinesViewFabChild().executeQuery();
            this.getXxpmPoLinesViewAccChild().executeQuery();
        } catch (SQLException e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    public void insetArticleIntoSetBom(Integer progId, Integer setId,
                                       Integer setBomId, String s4,
                                       String s5) {
        String sql =
            "BEGIN XXPM_SET_BOM_PKG.INS_ARTICLES_INTO_SET_BOM ( :P_PROG_ID,:P_SET_ID,:P_SET_BOM_ID,:SEG4,:SEG5); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.setInt("P_PROG_ID", progId);
            stmt.setInt("P_SET_ID", setId);
            stmt.setInt("P_SET_BOM_ID", setBomId);
            stmt.setString("SEG4", s4);
            stmt.setString("SEG5", s5);
            logger.warning("P_PROG_ID ===== " + progId);
            logger.warning("P_SET_ID ===== " + setId);
            logger.warning("P_SET_BOM_ID ===== " + setBomId);
            logger.warning("SEG4 ===== " + s4);
            logger.warning("SEG5 ===== " + s5);
            stmt.executeUpdate();
        } catch (Exception e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    public void updateSetAccColors(String bomId) {
        String query =
            "BEGIN XXPM_SET_BOM_PKG.UPDATE_ACC_COLORS_PROC (:BOM); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.setString("BOM", bomId);
            stmt.executeUpdate();
        } catch (SQLException e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    //    public void insertSetAccItemIntoEbs() {
    //        String query =
    //            "BEGIN XXPM_SET_BOM_PKG.INS_ACC_ITM_INTO_EBS_PROC; END;";
    //        CallableStatement stmt =
    //            this.getDBTransaction().createCallableStatement(query, 0);
    //        try {
    //            stmt.execute();
    //        } catch (SQLException e) {
    //            logger.info("insertAccItemIntoEbs result ===== " +
    //                             e.getMessage());
    //        } finally {
    //            try {
    //                stmt.close();
    //            } catch (Exception e) {
    //                // TODO: Add catch code
    //                e.printStackTrace();
    //            }
    //        }
    //    }

    public int createSetBom(String bomId) {
        //        this.getDBTransaction().commit();
        int successMsg = 0;
        String sql =
            "BEGIN XXPM_SET_BOM_PKG.CREATE_BOM_PROC(?, ?, ?, ?); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.registerOutParameter(4, Types.INTEGER);
            stmt.setString(1, bomId);
            stmt.setString(2, getUserInfo(1));
            stmt.setString(3, getUserInfo(2));
            logger.warning("BOM = " + bomId);
            logger.warning("V_USER = " + getUserInfo(1));
            logger.warning("V_RESP = " + getUserInfo(2));
            stmt.execute();
            successMsg = stmt.getInt(4);
        } catch (Exception e) {
            e.printStackTrace();
            successMsg = 0;
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return successMsg;
    }

    public int setBomProc(String bomId) {
        int result = 0;
        long startTime = System.currentTimeMillis();
        logger.warning("updateSetAccColors method of Set BOM started at " +
                       new Date());
        updateSetAccColors(bomId);
        logger.warning("updateSetAccColors method of Set BOM end " +
                       new Date());
        //        insertSetAccItemIntoEbs();

        logger.warning("createSetBom method of Set BOM started at " +
                       new Date());
        result = createSetBom(bomId);
        logger.warning("createSetBom method of Set BOM end at " + new Date());
        long endTime = System.currentTimeMillis();
        logger.warning("Total time for setBomProc: " +
                       TimeUnit.MILLISECONDS.toSeconds(endTime - startTime) +
                       " seconds.");
        return result;
    }

    public void deleteMadeupCombs() {
        ViewObject combVo = this.getXxpmMadeupCombinationsViewChild();
        Row[] combRows = combVo.getAllRowsInRange();
        for (int i = 0; i < combRows.length; i++) {
            Row curRow = combRows[i];
            int ebsStatus =
                (curRow.getAttribute("EbsStatus") != null ? (Integer)curRow.getAttribute("EbsStatus") :
                 0);
            logger.warning("ebsStatus = " + ebsStatus);
            int delStatus =
                (curRow.getAttribute("Deleted") != null ? (Integer)curRow.getAttribute("Deleted") :
                 0);
            logger.warning("delStatus = " + delStatus);
            if (ebsStatus == 0 && delStatus == 1) {
                curRow.remove();
            }
        }
        this.getDBTransaction().commit();
        combVo.executeQuery();
    }

    public void generatePO(Integer phId) {
        String sql =
            "BEGIN XXPM_PO_PKG.INSERT_PO_INTO_EBS_PROC ( :PH_ID, :UID, :RESP); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.setInt("PH_ID", phId);
            stmt.setString("UID", getUserInfo(1));
            stmt.setString("RESP", getUserInfo(2));
            stmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    public String getActiveUserAgent() {
        String result = null;
        String sql =
            "BEGIN :RESULT := XXPM_GET_ACTV_USER_AGENT_FUNC (:UID); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.registerOutParameter("RESULT", Types.VARCHAR);
            stmt.setString("UID", getUserInfo(1));
            stmt.execute();
            result = stmt.getString("RESULT");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        logger.warning("Active user agent -----> " + result);
        return result;
    }

    public void executePoLinesAccCatQuery(String accCat) {
        ViewObject vo = this.getXxpmPoLinesViewAccChild();
        String where = "ACC_CAT IN (" + (accCat != null ? accCat : "''") + ")";
        logger.warning("where = " + where);
        vo.setWhereClause(where);
        vo.executeQuery();
        //vo.setWhereClause(null);
    }

    public Integer getDefaultVendorSiteId(Integer vendorId) {
        Integer result = null;
        Row[] vendorSiteRows =
            this.getVendorSitesLov().getFilteredRows("VendorId", vendorId);
        for (int i = 0; i < vendorSiteRows.length; i++) {
            Row firstRow = vendorSiteRows[i];
            if (firstRow.getAttribute("VendorSiteId") != null) {
                result = (Integer)firstRow.getAttribute("VendorSiteId");
                break;
            }
        }
        return result;
    }

    public void updateRemarksIntoPoLine(String lineId, String remarks) {
        String sql =
            "BEGIN XXPM_UPD_REM_TO_POLINE_PROC (:LINE_ID, :REMARKS); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.setString("LINE_ID", lineId);
            stmt.setString("REMARKS", remarks);
            stmt.executeUpdate();
        } catch (Exception e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    public Integer createArticleBomVersion(String boms, String versionDesc) {
        Integer result = null;
        String sql =
            "BEGIN   XXPM_ARTICLE_BOM_PKG.CREATE_ART_BOM_VERSION_PROC ( ?, ?, ?, ?, ?); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.registerOutParameter(5, Types.VARCHAR);
            stmt.setString(1, boms);
            stmt.setString(2, this.getUserInfo(1));
            stmt.setString(3, this.getUserInfo(2));
            stmt.setString(4, versionDesc);
            stmt.execute();
            result = stmt.getInt(5);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return result;
    }

    public void copyAccItemFromProgToProg(String fromProg, String toProg) {
        String sql = "BEGIN XXPM_ACC_BULK_COPY(?,?,?,?); END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(sql, 0);
        try {
            stmt.setString(1, fromProg);
            stmt.setString(2, toProg);
            stmt.setString(3, this.getUserInfo(1));
            stmt.setString(4, this.getUserInfo(2));
            stmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }
    
    public int copyBomFromProgToAnother(int srcArticle, int srcVersion, int destProg, int destArticle) {
        int successMsg = 0;
        String query =
            "BEGIN   XXPM_ARTICLE_BOM_PKG.COPY_BOM_TO_ANOTHER_PROG(:P_SRC_ARTICLE ,:P_SRC_VERSION ,:P_DEST_PROG ,:P_DEST_ARTICLE ,:P_USER ,:P_RESP ,:SUCCESS_MSG);  END;";
        CallableStatement stmt =
            getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.setInt("P_SRC_ARTICLE", srcArticle);
            stmt.setInt("P_SRC_VERSION", srcVersion);
            stmt.setInt("P_DEST_PROG", destProg);
            stmt.setInt("P_DEST_ARTICLE", destArticle);
            stmt.setString("P_USER", getUserInfo(1));
            stmt.setString("P_RESP", getUserInfo(2));
            stmt.registerOutParameter("SUCCESS_MSG", Types.INTEGER);
            stmt.executeUpdate();
            logger.warning("SUCCESS MSG ===== " + stmt.getInt("SUCCESS_MSG"));
            successMsg = stmt.getInt("SUCCESS_MSG");
        } catch (Exception e1) {
            // TODO: Add catch code
            logger.warning("msg == ADF Error");
            successMsg = 0;
            logger.info(e1.getMessage());
            e1.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return successMsg;
    }
}
