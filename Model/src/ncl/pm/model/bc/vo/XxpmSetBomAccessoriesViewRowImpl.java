package ncl.pm.model.bc.vo;

import ncl.pm.model.bc.eo.XxpmSetBomAccessoriesImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 05 16:26:56 PKT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmSetBomAccessoriesViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AccessoryId {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getAccessoryId();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccessoryId((DBSequence)value);
            }
        }
        ,
        SetBomId {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getSetBomId();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setSetBomId((Number)value);
            }
        }
        ,
        ImId {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getImId();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setImId((Number)value);
            }
        }
        ,
        SubInventory {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getSubInventory();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setSubInventory((String)value);
            }
        }
        ,
        Consumption {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getConsumption();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setConsumption((Number)value);
            }
        }
        ,
        Wastage {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getWastage();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setWastage((Number)value);
            }
        }
        ,
        AccColor {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getAccColor();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccColor((String)value);
            }
        }
        ,
        AccColorTrans {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getAccColorTrans();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccColorTrans((String)value);
            }
        }
        ,
        AccSize {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getAccSize();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccSize((String)value);
            }
        }
        ,
        ItemCodeTrans {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getItemCodeTrans();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setItemCodeTrans((String)value);
            }
        }
        ,
        DescriptionTrans {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getDescriptionTrans();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setDescriptionTrans((String)value);
            }
        }
        ,
        UomTrans {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getUomTrans();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setUomTrans((String)value);
            }
        }
        ,
        EbsStatus {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getEbsStatus();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setEbsStatus((Integer)value);
            }
        }
        ,
        Active {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getActive();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setActive((Integer)value);
            }
        }
        ,
        XxpmSetBomView {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getXxpmSetBomView();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SetBomAccessDescLov {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getSetBomAccessDescLov();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItemColorsLov {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getItemColorsLov();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItemSizeLov {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getItemSizeLov();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YesNoIntlov {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getYesNoIntlov();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ArticleBomItemSubInvLov {
            public Object get(XxpmSetBomAccessoriesViewRowImpl obj) {
                return obj.getArticleBomItemSubInvLov();
            }

            public void put(XxpmSetBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmSetBomAccessoriesViewRowImpl object);

        public abstract void put(XxpmSetBomAccessoriesViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ACCESSORYID = AttributesEnum.AccessoryId.index();
    public static final int SETBOMID = AttributesEnum.SetBomId.index();
    public static final int IMID = AttributesEnum.ImId.index();
    public static final int SUBINVENTORY = AttributesEnum.SubInventory.index();
    public static final int CONSUMPTION = AttributesEnum.Consumption.index();
    public static final int WASTAGE = AttributesEnum.Wastage.index();
    public static final int ACCCOLOR = AttributesEnum.AccColor.index();
    public static final int ACCCOLORTRANS = AttributesEnum.AccColorTrans.index();
    public static final int ACCSIZE = AttributesEnum.AccSize.index();
    public static final int ITEMCODETRANS = AttributesEnum.ItemCodeTrans.index();
    public static final int DESCRIPTIONTRANS = AttributesEnum.DescriptionTrans.index();
    public static final int UOMTRANS = AttributesEnum.UomTrans.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int XXPMSETBOMVIEW = AttributesEnum.XxpmSetBomView.index();
    public static final int SETBOMACCESSDESCLOV = AttributesEnum.SetBomAccessDescLov.index();
    public static final int ITEMCOLORSLOV = AttributesEnum.ItemColorsLov.index();
    public static final int ITEMSIZELOV = AttributesEnum.ItemSizeLov.index();
    public static final int YESNOINTLOV = AttributesEnum.YesNoIntlov.index();
    public static final int ARTICLEBOMITEMSUBINVLOV = AttributesEnum.ArticleBomItemSubInvLov.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmSetBomAccessoriesViewRowImpl() {
    }

    /**
     * Gets XxpmSetBomAccessories entity object.
     * @return the XxpmSetBomAccessories
     */
    public XxpmSetBomAccessoriesImpl getXxpmSetBomAccessories() {
        return (XxpmSetBomAccessoriesImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for ACCESSORY_ID using the alias name AccessoryId.
     * @return the ACCESSORY_ID
     */
    public DBSequence getAccessoryId() {
        return (DBSequence)getAttributeInternal(ACCESSORYID);
    }

    /**
     * Sets <code>value</code> as attribute value for ACCESSORY_ID using the alias name AccessoryId.
     * @param value value to set the ACCESSORY_ID
     */
    public void setAccessoryId(DBSequence value) {
        setAttributeInternal(ACCESSORYID, value);
    }

    /**
     * Gets the attribute value for SET_BOM_ID using the alias name SetBomId.
     * @return the SET_BOM_ID
     */
    public Number getSetBomId() {
        return (Number)getAttributeInternal(SETBOMID);
    }

    /**
     * Sets <code>value</code> as attribute value for SET_BOM_ID using the alias name SetBomId.
     * @param value value to set the SET_BOM_ID
     */
    public void setSetBomId(Number value) {
        setAttributeInternal(SETBOMID, value);
    }

    /**
     * Gets the attribute value for IM_ID using the alias name ImId.
     * @return the IM_ID
     */
    public Number getImId() {
        return (Number)getAttributeInternal(IMID);
    }

    /**
     * Sets <code>value</code> as attribute value for IM_ID using the alias name ImId.
     * @param value value to set the IM_ID
     */
    public void setImId(Number value) {
        setAttributeInternal(IMID, value);
        setSubInventory(getDefaultValForSubInvAcc());
    }

    /**
     * Gets the attribute value for SUB_INVENTORY using the alias name SubInventory.
     * @return the SUB_INVENTORY
     */
    public String getSubInventory() {
        return (String)getAttributeInternal(SUBINVENTORY);
    }

    /**
     * Sets <code>value</code> as attribute value for SUB_INVENTORY using the alias name SubInventory.
     * @param value value to set the SUB_INVENTORY
     */
    public void setSubInventory(String value) {
        setAttributeInternal(SUBINVENTORY, value);
    }

    /**
     * Gets the attribute value for CONSUMPTION using the alias name Consumption.
     * @return the CONSUMPTION
     */
    public Number getConsumption() {
        return (Number)getAttributeInternal(CONSUMPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for CONSUMPTION using the alias name Consumption.
     * @param value value to set the CONSUMPTION
     */
    public void setConsumption(Number value) {
        setAttributeInternal(CONSUMPTION, value);
    }

    /**
     * Gets the attribute value for WASTAGE using the alias name Wastage.
     * @return the WASTAGE
     */
    public Number getWastage() {
        return (Number)getAttributeInternal(WASTAGE);
    }

    /**
     * Sets <code>value</code> as attribute value for WASTAGE using the alias name Wastage.
     * @param value value to set the WASTAGE
     */
    public void setWastage(Number value) {
        setAttributeInternal(WASTAGE, value);
    }

    /**
     * Gets the attribute value for ACC_COLOR using the alias name AccColor.
     * @return the ACC_COLOR
     */
    public String getAccColor() {
        return (String)getAttributeInternal(ACCCOLOR);
    }

    /**
     * Sets <code>value</code> as attribute value for ACC_COLOR using the alias name AccColor.
     * @param value value to set the ACC_COLOR
     */
    public void setAccColor(String value) {
        setAttributeInternal(ACCCOLOR, value);
    }

    /**
     * Gets the attribute value for ACC_SIZE using the alias name AccSize.
     * @return the ACC_SIZE
     */
    public String getAccSize() {
        return (String)getAttributeInternal(ACCSIZE);
    }

    /**
     * Sets <code>value</code> as attribute value for ACC_SIZE using the alias name AccSize.
     * @param value value to set the ACC_SIZE
     */
    public void setAccSize(String value) {
        setAttributeInternal(ACCSIZE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemCodeTrans.
     * @return the ItemCodeTrans
     */
    public String getItemCodeTrans() {
        return (String)getAttributeInternal(ITEMCODETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemCodeTrans.
     * @param value value to set the  ItemCodeTrans
     */
    public void setItemCodeTrans(String value) {
        setAttributeInternal(ITEMCODETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DescriptionTrans.
     * @return the DescriptionTrans
     */
    public String getDescriptionTrans() {
        return (String)getAttributeInternal(DESCRIPTIONTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DescriptionTrans.
     * @param value value to set the  DescriptionTrans
     */
    public void setDescriptionTrans(String value) {
        setAttributeInternal(DESCRIPTIONTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UomTrans.
     * @return the UomTrans
     */
    public String getUomTrans() {
        return (String)getAttributeInternal(UOMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UomTrans.
     * @param value value to set the  UomTrans
     */
    public void setUomTrans(String value) {
        setAttributeInternal(UOMTRANS, value);
    }

    /**
     * Gets the attribute value for EBS_STATUS using the alias name EbsStatus.
     * @return the EBS_STATUS
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for EBS_STATUS using the alias name EbsStatus.
     * @param value value to set the EBS_STATUS
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }

    /**
     * Gets the attribute value for ACTIVE using the alias name Active.
     * @return the ACTIVE
     */
    public Integer getActive() {
        return (Integer)getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as attribute value for ACTIVE using the alias name Active.
     * @param value value to set the ACTIVE
     */
    public void setActive(Integer value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AccColorTrans.
     * @return the AccColorTrans
     */
    public String getAccColorTrans() {
        return (String) getAttributeInternal(ACCCOLORTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccColorTrans.
     * @param value value to set the  AccColorTrans
     */
    public void setAccColorTrans(String value) {
        setAttributeInternal(ACCCOLORTRANS, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link XxpmSetBomView.
     */
    public Row getXxpmSetBomView() {
        return (Row)getAttributeInternal(XXPMSETBOMVIEW);
    }

    /**
     * Sets the master-detail link XxpmSetBomView between this object and <code>value</code>.
     */
    public void setXxpmSetBomView(Row value) {
        setAttributeInternal(XXPMSETBOMVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> SetBomAccessDescLov.
     */
    public RowSet getSetBomAccessDescLov() {
        return (RowSet)getAttributeInternal(SETBOMACCESSDESCLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemColorsLov.
     */
    public RowSet getItemColorsLov() {
        return (RowSet)getAttributeInternal(ITEMCOLORSLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemSizeLov.
     */
    public RowSet getItemSizeLov() {
        return (RowSet)getAttributeInternal(ITEMSIZELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoIntlov.
     */
    public RowSet getYesNoIntlov() {
        return (RowSet)getAttributeInternal(YESNOINTLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ArticleBomItemSubInvLov.
     */
    public RowSet getArticleBomItemSubInvLov() {
        return (RowSet)getAttributeInternal(ARTICLEBOMITEMSUBINVLOV);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    public String getDefaultValForSubInvAcc() {
        String result = null;
//        Logger.adfLogger.warning("ImId: " + getImId());
        if (getImId() != null) {
//            Logger.adfLogger.warning("All Rows: " +
//                               getArticleBomItemSubInvLov().getEstimatedRowCount());

            for (Row row : getArticleBomItemSubInvLov().getAllRowsInRange()) {
                if (getImId().toString().equalsIgnoreCase(String.valueOf(row.getAttribute("ImId")))) {
                    result = String.valueOf(row.getAttribute("SubInv"));
                    break;
                }
            }
            
//            Row[] subInvAccRows =
            //                this.getArticleBomItemSubInvLov().getFilteredRows("ImId",
            //                                                                  getImId());
            //            Logger.adfLogger.warning("Filtered Rows: " + subInvAccRows.length);
            //            for (int i = 0; i < subInvAccRows.length; i++) {
            //                Row firstRow = subInvAccRows[i];
            //                if (firstRow.getAttribute("SubInv") != null) {
            //                    result = String.valueOf(firstRow.getAttribute("SubInv"));
            //                    break;
            //                }
            //            }
        }
//        Logger.adfLogger.warning("Acc Sub Inv: " + result);
        return result;
    }
}
