package ncl.pm.model.bc.vo;

import ncl.pm.model.bc.eo.XxpmAbFabricSizesImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 06 17:27:35 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmAbFabricSizesViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AbFabSizeId {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getAbFabSizeId();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setAbFabSizeId((DBSequence)value);
            }
        }
        ,
        ArtBomFabId {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getArtBomFabId();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setArtBomFabId((Number)value);
            }
        }
        ,
        SizeCode {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getSizeCode();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setSizeCode((String)value);
            }
        }
        ,
        SizeDesc {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getSizeDesc();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setSizeDesc((String)value);
            }
        }
        ,
        Selected {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getSelected();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setSelected((Integer)value);
            }
        }
        ,
        ItemSizeLov {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getItemSizeLov();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YesNoIntlov {
            public Object get(XxpmAbFabricSizesViewRowImpl obj) {
                return obj.getYesNoIntlov();
            }

            public void put(XxpmAbFabricSizesViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmAbFabricSizesViewRowImpl object);

        public abstract void put(XxpmAbFabricSizesViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ABFABSIZEID = AttributesEnum.AbFabSizeId.index();
    public static final int ARTBOMFABID = AttributesEnum.ArtBomFabId.index();
    public static final int SIZECODE = AttributesEnum.SizeCode.index();
    public static final int SIZEDESC = AttributesEnum.SizeDesc.index();
    public static final int SELECTED = AttributesEnum.Selected.index();
    public static final int ITEMSIZELOV = AttributesEnum.ItemSizeLov.index();
    public static final int YESNOINTLOV = AttributesEnum.YesNoIntlov.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmAbFabricSizesViewRowImpl() {
    }

    /**
     * Gets XxpmAbFabricSizes entity object.
     * @return the XxpmAbFabricSizes
     */
    public XxpmAbFabricSizesImpl getXxpmAbFabricSizes() {
        return (XxpmAbFabricSizesImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for AB_FAB_SIZE_ID using the alias name AbFabSizeId.
     * @return the AB_FAB_SIZE_ID
     */
    public DBSequence getAbFabSizeId() {
        return (DBSequence)getAttributeInternal(ABFABSIZEID);
    }

    /**
     * Sets <code>value</code> as attribute value for AB_FAB_SIZE_ID using the alias name AbFabSizeId.
     * @param value value to set the AB_FAB_SIZE_ID
     */
    public void setAbFabSizeId(DBSequence value) {
        setAttributeInternal(ABFABSIZEID, value);
    }

    /**
     * Gets the attribute value for ART_BOM_FAB_ID using the alias name ArtBomFabId.
     * @return the ART_BOM_FAB_ID
     */
    public Number getArtBomFabId() {
        return (Number)getAttributeInternal(ARTBOMFABID);
    }

    /**
     * Sets <code>value</code> as attribute value for ART_BOM_FAB_ID using the alias name ArtBomFabId.
     * @param value value to set the ART_BOM_FAB_ID
     */
    public void setArtBomFabId(Number value) {
        setAttributeInternal(ARTBOMFABID, value);
    }

    /**
     * Gets the attribute value for SIZE_CODE using the alias name SizeCode.
     * @return the SIZE_CODE
     */
    public String getSizeCode() {
        return (String)getAttributeInternal(SIZECODE);
    }

    /**
     * Sets <code>value</code> as attribute value for SIZE_CODE using the alias name SizeCode.
     * @param value value to set the SIZE_CODE
     */
    public void setSizeCode(String value) {
        setAttributeInternal(SIZECODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SizeDesc.
     * @return the SizeDesc
     */
    public String getSizeDesc() {
        return (String)getAttributeInternal(SIZEDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SizeDesc.
     * @param value value to set the  SizeDesc
     */
    public void setSizeDesc(String value) {
        setAttributeInternal(SIZEDESC, value);
    }

    /**
     * Gets the attribute value for SELECTED using the alias name Selected.
     * @return the SELECTED
     */
    public Integer getSelected() {
        return (Integer)getAttributeInternal(SELECTED);
    }

    /**
     * Sets <code>value</code> as attribute value for SELECTED using the alias name Selected.
     * @param value value to set the SELECTED
     */
    public void setSelected(Integer value) {
        setAttributeInternal(SELECTED, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> ItemSizeLov.
     */
    public RowSet getItemSizeLov() {
        return (RowSet)getAttributeInternal(ITEMSIZELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoIntlov.
     */
    public RowSet getYesNoIntlov() {
        return (RowSet)getAttributeInternal(YESNOINTLOV);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
