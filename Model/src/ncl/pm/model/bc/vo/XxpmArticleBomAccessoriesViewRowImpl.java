package ncl.pm.model.bc.vo;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import ncl.pm.model.bc.eo.XxpmArticleBomAccessoriesImpl;

import ncl.pm.model.bc.view.xxpmJC.Logger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 02 20:02:29 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmArticleBomAccessoriesViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ArtBomAccId {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getArtBomAccId();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setArtBomAccId((DBSequence)value);
            }
        }
        ,
        ArtBomId {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getArtBomId();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setArtBomId((Number)value);
            }
        }
        ,
        ImId {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getImId();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setImId((Integer)value);
            }
        }
        ,
        Segment2 {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getSegment2();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setSegment2((String)value);
            }
        }
        ,
        Description {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getDescription();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        AccColor {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getAccColor();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccColor((String)value);
            }
        }
        ,
        AccColorTrans {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getAccColorTrans();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccColorTrans((String)value);
            }
        }
        ,
        AccSize {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getAccSize();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccSize((String)value);
            }
        }
        ,
        AccSizeTrans {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getAccSizeTrans();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAccSizeTrans((String)value);
            }
        }
        ,
        Uom {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getUom();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setUom((String)value);
            }
        }
        ,
        SubInv {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getSubInv();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setSubInv((String)value);
            }
        }
        ,
        Consumption {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getConsumption();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setConsumption((Number)value);
            }
        }
        ,
        MeterConeConversion {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getMeterConeConversion();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setMeterConeConversion((Number)value);
            }
        }
        ,
        Wastage {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getWastage();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setWastage((Number)value);
            }
        }
        ,
        Active {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getActive();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setActive((Integer)value);
            }
        }
        ,
        EbsStatus {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getEbsStatus();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setEbsStatus((Integer)value);
            }
        }
        ,
        ColorChkbox {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getColorChkbox();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setColorChkbox((Integer)value);
            }
        }
        ,
        SizeChkbox {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getSizeChkbox();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setSizeChkbox((Integer)value);
            }
        }
        ,
        XxpmAbAccessoriesColorsView {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getXxpmAbAccessoriesColorsView();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        XxpmAbAccessoriesSizesView {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getXxpmAbAccessoriesSizesView();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        XxpmArticleBomView {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getXxpmArticleBomView();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItemColorsLov {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getItemColorsLov();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ArticleBomItemSubInvLov {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getArticleBomItemSubInvLov();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ArticleBomAcclov {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getArticleBomAcclov();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YesNoIntlov {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getYesNoIntlov();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItemSizeLov {
            public Object get(XxpmArticleBomAccessoriesViewRowImpl obj) {
                return obj.getItemSizeLov();
            }

            public void put(XxpmArticleBomAccessoriesViewRowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmArticleBomAccessoriesViewRowImpl object);

        public abstract void put(XxpmArticleBomAccessoriesViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ARTBOMACCID = AttributesEnum.ArtBomAccId.index();
    public static final int ARTBOMID = AttributesEnum.ArtBomId.index();
    public static final int IMID = AttributesEnum.ImId.index();
    public static final int SEGMENT2 = AttributesEnum.Segment2.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ACCCOLOR = AttributesEnum.AccColor.index();
    public static final int ACCCOLORTRANS = AttributesEnum.AccColorTrans.index();
    public static final int ACCSIZE = AttributesEnum.AccSize.index();
    public static final int ACCSIZETRANS = AttributesEnum.AccSizeTrans.index();
    public static final int UOM = AttributesEnum.Uom.index();
    public static final int SUBINV = AttributesEnum.SubInv.index();
    public static final int CONSUMPTION = AttributesEnum.Consumption.index();
    public static final int METERCONECONVERSION = AttributesEnum.MeterConeConversion.index();
    public static final int WASTAGE = AttributesEnum.Wastage.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int EBSSTATUS = AttributesEnum.EbsStatus.index();
    public static final int COLORCHKBOX = AttributesEnum.ColorChkbox.index();
    public static final int SIZECHKBOX = AttributesEnum.SizeChkbox.index();
    public static final int XXPMABACCESSORIESCOLORSVIEW = AttributesEnum.XxpmAbAccessoriesColorsView.index();
    public static final int XXPMABACCESSORIESSIZESVIEW = AttributesEnum.XxpmAbAccessoriesSizesView.index();
    public static final int XXPMARTICLEBOMVIEW = AttributesEnum.XxpmArticleBomView.index();
    public static final int ITEMCOLORSLOV = AttributesEnum.ItemColorsLov.index();
    public static final int ARTICLEBOMITEMSUBINVLOV = AttributesEnum.ArticleBomItemSubInvLov.index();
    public static final int ARTICLEBOMACCLOV = AttributesEnum.ArticleBomAcclov.index();
    public static final int YESNOINTLOV = AttributesEnum.YesNoIntlov.index();
    public static final int ITEMSIZELOV = AttributesEnum.ItemSizeLov.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmArticleBomAccessoriesViewRowImpl() {
    }

    /**
     * Gets XxpmArticleBomAccessories entity object.
     * @return the XxpmArticleBomAccessories
     */
    public XxpmArticleBomAccessoriesImpl getXxpmArticleBomAccessories() {
        return (XxpmArticleBomAccessoriesImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for ART_BOM_ACC_ID using the alias name ArtBomAccId.
     * @return the ART_BOM_ACC_ID
     */
    public DBSequence getArtBomAccId() {
        return (DBSequence)getAttributeInternal(ARTBOMACCID);
    }

    /**
     * Sets <code>value</code> as attribute value for ART_BOM_ACC_ID using the alias name ArtBomAccId.
     * @param value value to set the ART_BOM_ACC_ID
     */
    public void setArtBomAccId(DBSequence value) {
        setAttributeInternal(ARTBOMACCID, value);
    }

    /**
     * Gets the attribute value for ART_BOM_ID using the alias name ArtBomId.
     * @return the ART_BOM_ID
     */
    public Number getArtBomId() {
        return (Number)getAttributeInternal(ARTBOMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ART_BOM_ID using the alias name ArtBomId.
     * @param value value to set the ART_BOM_ID
     */
    public void setArtBomId(Number value) {
        setAttributeInternal(ARTBOMID, value);
    }

    /**
     * Gets the attribute value for IM_ID using the alias name ImId.
     * @return the IM_ID
     */
    public Integer getImId() {
        return (Integer)getAttributeInternal(IMID);
    }

    /**
     * Sets <code>value</code> as attribute value for IM_ID using the alias name ImId.
     * @param value value to set the IM_ID
     */
    public void setImId(Integer value) {
        setAttributeInternal(IMID, value);
        setSubInv(getDefaultValForSubInvAcc());
    }

    /**
     * Gets the attribute value for SEGMENT2 using the alias name Segment2.
     * @return the SEGMENT2
     */
    public String getSegment2() {
        return (String)getAttributeInternal(SEGMENT2);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT2 using the alias name Segment2.
     * @param value value to set the SEGMENT2
     */
    public void setSegment2(String value) {
        setAttributeInternal(SEGMENT2, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Description.
     * @return the Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Description.
     * @param value value to set the  Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ACC_COLOR using the alias name AccColor.
     * @return the ACC_COLOR
     */
    public String getAccColor() {
        return (String)getAttributeInternal(ACCCOLOR);
    }

    /**
     * Sets <code>value</code> as attribute value for ACC_COLOR using the alias name AccColor.
     * @param value value to set the ACC_COLOR
     */
    public void setAccColor(String value) {
        setAttributeInternal(ACCCOLOR, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Uom.
     * @return the Uom
     */
    public String getUom() {
        return (String)getAttributeInternal(UOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Uom.
     * @param value value to set the  Uom
     */
    public void setUom(String value) {
        setAttributeInternal(UOM, value);
    }

    /**
     * Gets the attribute value for SUB_INV using the alias name SubInv.
     * @return the SUB_INV
     */
    public String getSubInv() {
        return (String)getAttributeInternal(SUBINV);
    }

    /**
     * Sets <code>value</code> as attribute value for SUB_INV using the alias name SubInv.
     * @param value value to set the SUB_INV
     */
    public void setSubInv(String value) {
        setAttributeInternal(SUBINV, value);
    }

    /**
     * Gets the attribute value for CONSUMPTION using the alias name Consumption.
     * @return the CONSUMPTION
     */
    public Number getConsumption() {
        return (Number)getAttributeInternal(CONSUMPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for CONSUMPTION using the alias name Consumption.
     * @param value value to set the CONSUMPTION
     */
    public void setConsumption(Number value) {
        setAttributeInternal(CONSUMPTION, value);
    }

    /**
     * Gets the attribute value for METER_CONE_CONVERSION using the alias name MeterConeConversion.
     * @return the METER_CONE_CONVERSION
     */
    public Number getMeterConeConversion() {
        return (Number)getAttributeInternal(METERCONECONVERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for METER_CONE_CONVERSION using the alias name MeterConeConversion.
     * @param value value to set the METER_CONE_CONVERSION
     */
    public void setMeterConeConversion(Number value) {
        setAttributeInternal(METERCONECONVERSION, value);
        ///////////////////////
        Number result;

        String query =
            "BEGIN :VAL := XXPM_METER_CONE_CNVRSION_FUNC ( :ITEM_ID, :P_VALUE); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.registerOutParameter("VAL", Types.DOUBLE);
            stmt.setInt("ITEM_ID", this.getImId());
            stmt.setDouble("P_VALUE", value.doubleValue());
            stmt.execute();
            result = new Number(stmt.getDouble("VAL"));
            setConsumption(result);
        } catch (Exception e) {
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    /**
     * Gets the attribute value for WASTAGE using the alias name Wastage.
     * @return the WASTAGE
     */
    public Number getWastage() {
        return (Number)getAttributeInternal(WASTAGE);
    }

    /**
     * Sets <code>value</code> as attribute value for WASTAGE using the alias name Wastage.
     * @param value value to set the WASTAGE
     */
    public void setWastage(Number value) {
        setAttributeInternal(WASTAGE, value);
    }

    /**
     * Gets the attribute value for ACTIVE using the alias name Active.
     * @return the ACTIVE
     */
    public Integer getActive() {
        return (Integer)getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as attribute value for ACTIVE using the alias name Active.
     * @param value value to set the ACTIVE
     */
    public void setActive(Integer value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for EBS_STATUS using the alias name EbsStatus.
     * @return the EBS_STATUS
     */
    public Integer getEbsStatus() {
        return (Integer)getAttributeInternal(EBSSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for EBS_STATUS using the alias name EbsStatus.
     * @param value value to set the EBS_STATUS
     */
    public void setEbsStatus(Integer value) {
        setAttributeInternal(EBSSTATUS, value);
    }

    /**
     * Gets the attribute value for COLOR_CHKBOX using the alias name ColorChkbox.
     * @return the COLOR_CHKBOX
     */
    public Integer getColorChkbox() {
        return (Integer)getAttributeInternal(COLORCHKBOX);
    }

    /**
     * Sets <code>value</code> as attribute value for COLOR_CHKBOX using the alias name ColorChkbox.
     * @param value value to set the COLOR_CHKBOX
     */
    public void setColorChkbox(Integer value) {
        setAttributeInternal(COLORCHKBOX, value);
    }

    /**
     * Gets the attribute value for SIZE_CHKBOX using the alias name SizeChkbox.
     * @return the SIZE_CHKBOX
     */
    public Integer getSizeChkbox() {
        return (Integer)getAttributeInternal(SIZECHKBOX);
    }

    /**
     * Sets <code>value</code> as attribute value for SIZE_CHKBOX using the alias name SizeChkbox.
     * @param value value to set the SIZE_CHKBOX
     */
    public void setSizeChkbox(Integer value) {
        setAttributeInternal(SIZECHKBOX, value);
    }


    /**
     * Gets the attribute value for the calculated attribute AccSizeTrans.
     * @return the AccSizeTrans
     */
    public String getAccSizeTrans() {
        return (String) getAttributeInternal(ACCSIZETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccSizeTrans.
     * @param value value to set the  AccSizeTrans
     */
    public void setAccSizeTrans(String value) {
        setAttributeInternal(ACCSIZETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AccColorTrans.
     * @return the AccColorTrans
     */
    public String getAccColorTrans() {
        return (String) getAttributeInternal(ACCCOLORTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AccColorTrans.
     * @param value value to set the  AccColorTrans
     */
    public void setAccColorTrans(String value) {
        setAttributeInternal(ACCCOLORTRANS, value);
    }

    /**
     * Gets the attribute value for ACC_SIZE using the alias name AccSize.
     * @return the ACC_SIZE
     */
    public String getAccSize() {
        return (String) getAttributeInternal(ACCSIZE);
    }

    /**
     * Sets <code>value</code> as attribute value for ACC_SIZE using the alias name AccSize.
     * @param value value to set the ACC_SIZE
     */
    public void setAccSize(String value) {
        setAttributeInternal(ACCSIZE, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link XxpmAbAccessoriesColorsView.
     */
    public RowIterator getXxpmAbAccessoriesColorsView() {
        return (RowIterator)getAttributeInternal(XXPMABACCESSORIESCOLORSVIEW);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link XxpmAbAccessoriesSizesView.
     */
    public RowIterator getXxpmAbAccessoriesSizesView() {
        return (RowIterator)getAttributeInternal(XXPMABACCESSORIESSIZESVIEW);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link XxpmArticleBomView.
     */
    public Row getXxpmArticleBomView() {
        return (Row)getAttributeInternal(XXPMARTICLEBOMVIEW);
    }

    /**
     * Sets the master-detail link XxpmArticleBomView between this object and <code>value</code>.
     */
    public void setXxpmArticleBomView(Row value) {
        setAttributeInternal(XXPMARTICLEBOMVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemColorsLov.
     */
    public RowSet getItemColorsLov() {
        return (RowSet)getAttributeInternal(ITEMCOLORSLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ArticleBomItemSubInvLov.
     */
    public RowSet getArticleBomItemSubInvLov() {
        return (RowSet)getAttributeInternal(ARTICLEBOMITEMSUBINVLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ArticleBomAcclov.
     */
    public RowSet getArticleBomAcclov() {
        return (RowSet)getAttributeInternal(ARTICLEBOMACCLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoIntlov.
     */
    public RowSet getYesNoIntlov() {
        return (RowSet)getAttributeInternal(YESNOINTLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemSizeLov.
     */
    public RowSet getItemSizeLov() {
        return (RowSet)getAttributeInternal(ITEMSIZELOV);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    @Override
    public void setNewRowState(byte state) {
        if (state != Row.STATUS_INITIALIZED ||
            getNewRowState() != Row.STATUS_NEW) {
            super.setNewRowState(state);
        }
    }

    public String getDefaultValForSubInvAcc() {
        String result = null;
        if (getImId() != null) {
            Row[] subInvAccRows =
                this.getArticleBomItemSubInvLov().getFilteredRows("ImId",
                                                                  getImId());
            for (int i = 0; i < subInvAccRows.length; i++) {
                Row firstRow = subInvAccRows[i];
                if (firstRow.getAttribute("SubInv") != null) {
                    result = String.valueOf(firstRow.getAttribute("SubInv"));
                    break;
                }
            }
        }
        Logger.adfLogger.warning("Acc Sub Inv: " + result);
        return result;
    }
}
