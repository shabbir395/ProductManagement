package ncl.pm.model.bc.vo;

import ncl.pm.model.bc.eo.XxpmAbFabricColorsImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 06 17:33:57 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmAbFabricColorsViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AbFabColorId {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getAbFabColorId();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setAbFabColorId((DBSequence)value);
            }
        }
        ,
        ArtBomFabId {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getArtBomFabId();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setArtBomFabId((Number)value);
            }
        }
        ,
        ColorCode {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getColorCode();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setColorCode((String)value);
            }
        }
        ,
        ColorDesc {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getColorDesc();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setColorDesc((String)value);
            }
        }
        ,
        Selected {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getSelected();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setSelected((Integer)value);
            }
        }
        ,
        ItemColorsLov {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getItemColorsLov();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YesNoIntlov {
            public Object get(XxpmAbFabricColorsViewRowImpl obj) {
                return obj.getYesNoIntlov();
            }

            public void put(XxpmAbFabricColorsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmAbFabricColorsViewRowImpl object);

        public abstract void put(XxpmAbFabricColorsViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ABFABCOLORID = AttributesEnum.AbFabColorId.index();
    public static final int ARTBOMFABID = AttributesEnum.ArtBomFabId.index();
    public static final int COLORCODE = AttributesEnum.ColorCode.index();
    public static final int COLORDESC = AttributesEnum.ColorDesc.index();
    public static final int SELECTED = AttributesEnum.Selected.index();
    public static final int ITEMCOLORSLOV = AttributesEnum.ItemColorsLov.index();
    public static final int YESNOINTLOV = AttributesEnum.YesNoIntlov.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmAbFabricColorsViewRowImpl() {
    }

    /**
     * Gets XxpmAbFabricColors entity object.
     * @return the XxpmAbFabricColors
     */
    public XxpmAbFabricColorsImpl getXxpmAbFabricColors() {
        return (XxpmAbFabricColorsImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for AB_FAB_COLOR_ID using the alias name AbFabColorId.
     * @return the AB_FAB_COLOR_ID
     */
    public DBSequence getAbFabColorId() {
        return (DBSequence)getAttributeInternal(ABFABCOLORID);
    }

    /**
     * Sets <code>value</code> as attribute value for AB_FAB_COLOR_ID using the alias name AbFabColorId.
     * @param value value to set the AB_FAB_COLOR_ID
     */
    public void setAbFabColorId(DBSequence value) {
        setAttributeInternal(ABFABCOLORID, value);
    }

    /**
     * Gets the attribute value for ART_BOM_FAB_ID using the alias name ArtBomFabId.
     * @return the ART_BOM_FAB_ID
     */
    public Number getArtBomFabId() {
        return (Number)getAttributeInternal(ARTBOMFABID);
    }

    /**
     * Sets <code>value</code> as attribute value for ART_BOM_FAB_ID using the alias name ArtBomFabId.
     * @param value value to set the ART_BOM_FAB_ID
     */
    public void setArtBomFabId(Number value) {
        setAttributeInternal(ARTBOMFABID, value);
    }

    /**
     * Gets the attribute value for COLOR_CODE using the alias name ColorCode.
     * @return the COLOR_CODE
     */
    public String getColorCode() {
        return (String)getAttributeInternal(COLORCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for COLOR_CODE using the alias name ColorCode.
     * @param value value to set the COLOR_CODE
     */
    public void setColorCode(String value) {
        setAttributeInternal(COLORCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ColorDesc.
     * @return the ColorDesc
     */
    public String getColorDesc() {
        return (String)getAttributeInternal(COLORDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ColorDesc.
     * @param value value to set the  ColorDesc
     */
    public void setColorDesc(String value) {
        setAttributeInternal(COLORDESC, value);
    }

    /**
     * Gets the attribute value for SELECTED using the alias name Selected.
     * @return the SELECTED
     */
    public Integer getSelected() {
        return (Integer)getAttributeInternal(SELECTED);
    }

    /**
     * Sets <code>value</code> as attribute value for SELECTED using the alias name Selected.
     * @param value value to set the SELECTED
     */
    public void setSelected(Integer value) {
        setAttributeInternal(SELECTED, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> ItemColorsLov.
     */
    public RowSet getItemColorsLov() {
        return (RowSet)getAttributeInternal(ITEMCOLORSLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YesNoIntlov.
     */
    public RowSet getYesNoIntlov() {
        return (RowSet)getAttributeInternal(YESNOINTLOV);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
