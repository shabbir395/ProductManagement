package ncl.pm.model.bc.vo;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import java.util.Collections;

import ncl.pm.model.bc.eo.XxpmItemMasterImpl;

import java.util.logging.Logger;

import ncl.pm.model.bc.vo.common.XxpmItemMasterWvViewRow;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 12 10:35:43 YEKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpmItemMasterWvViewRowImpl extends ViewRowImpl implements XxpmItemMasterWvViewRow {
    Logger logger = Logger.getLogger(this.getClass().getName());

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ImId {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getImId();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setImId((DBSequence)value);
            }
        },
        Segment2 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment2();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment2((String)value);
            }
        },
        Description {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getDescription();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        },
        Ends {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getEnds();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setEnds((Number)value);
            }
        },
        Picks {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getPicks();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setPicks((Number)value);
            }
        },
        Width {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWidth();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWidth((Number)value);
            }
        },
        Weave {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeave();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeave((String)value);
            }
        },
        Direction {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getDirection();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setDirection((String)value);
            }
        },
        Design {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getDesign();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setDesign((String)value);
            }
        },
        WeaveSize {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeaveSize();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeaveSize((String)value);
            }
        },
        Insertion {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getInsertion();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setInsertion((String)value);
            }
        },
        SelvedgeType {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSelvedgeType();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSelvedgeType((String)value);
            }
        },
        FabBlendType {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getFabBlendType();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setFabBlendType((String)value);
            }
        },
        EbsItemId {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getEbsItemId();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setEbsItemId((Number)value);
            }
        },
        ItemStatusFlag {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getItemStatusFlag();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setItemStatusFlag((Integer)value);
            }
        },
        Segment1 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment1();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment1((String)value);
            }
        },
        Segment3 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment3();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment3((String)value);
            }
        },
        Segment4 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment4();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment4((String)value);
            }
        },
        Segment5 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment5();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment5((String)value);
            }
        },
        Segment6 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment6();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment6((String)value);
            }
        },
        Segment7 {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment7();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment7((String)value);
            }
        },
        EPWResultant {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getEPWResultant();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setEPWResultant((String)value);
            }
        },
        WeaveResultant {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeaveResultant();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeaveResultant((String)value);
            }
        },
        WarpRowCount {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWarpRowCount();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWarpRowCount((Integer)value);
            }
        },
        WeftRowCount {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeftRowCount();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeftRowCount((Integer)value);
            }
        },
        EndsPerWarpCount {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getEndsPerWarpCount();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setEndsPerWarpCount((Double)value);
            }
        },
        PicksPerWeftCount {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getPicksPerWeftCount();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setPicksPerWeftCount((Double)value);
            }
        },
        WarpGSM {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWarpGSM();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWarpGSM((Double)value);
            }
        },
        WeftGSM {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeftGSM();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeftGSM((Double)value);
            }
        },
        FabricGSM {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getFabricGSM();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setFabricGSM((Double)value);
            }
        },
        FabricBlendResultant {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getFabricBlendResultant();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setFabricBlendResultant((String)value);
            }
        },
        WarpResultantSum {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWarpResultantSum();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWarpResultantSum((String)value);
            }
        },
        WeftResultantSum {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeftResultantSum();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeftResultantSum((String)value);
            }
        },
        WarpContraction {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWarpContraction();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWarpContraction((Number)value);
            }
        },
        WeftContraction {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWeftContraction();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWeftContraction((Number)value);
            }
        },
        RowStatus {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getRowStatus();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setRowStatus((Integer)value);
            }
        },
        FolderCode {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getFolderCode();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setFolderCode((Integer)value);
            }
        },
        Segment3Value {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getSegment3Value();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setSegment3Value((String)value);
            }
        },
        WvFabricBlend {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvFabricBlend();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setWvFabricBlend((String)value);
            }
        },
        XxpmWarpView {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getXxpmWarpView();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        XxpmWeftView {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getXxpmWeftView();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        XxpmAttachmentsView {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getXxpmAttachmentsView();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WvWeaveLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvWeaveLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WvDirectionLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvDirectionLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WvDesignLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvDesignLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WvSizeLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvSizeLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WvInsertionLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvInsertionLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WvSelvedgeLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getWvSelvedgeLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ItemStatusLov {
            public Object get(XxpmItemMasterWvViewRowImpl obj) {
                return obj.getItemStatusLov();
            }

            public void put(XxpmItemMasterWvViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpmItemMasterWvViewRowImpl object);

        public abstract void put(XxpmItemMasterWvViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IMID = AttributesEnum.ImId.index();
    public static final int SEGMENT2 = AttributesEnum.Segment2.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ENDS = AttributesEnum.Ends.index();
    public static final int PICKS = AttributesEnum.Picks.index();
    public static final int WIDTH = AttributesEnum.Width.index();
    public static final int WEAVE = AttributesEnum.Weave.index();
    public static final int DIRECTION = AttributesEnum.Direction.index();
    public static final int DESIGN = AttributesEnum.Design.index();
    public static final int WEAVESIZE = AttributesEnum.WeaveSize.index();
    public static final int INSERTION = AttributesEnum.Insertion.index();
    public static final int SELVEDGETYPE = AttributesEnum.SelvedgeType.index();
    public static final int FABBLENDTYPE = AttributesEnum.FabBlendType.index();
    public static final int EBSITEMID = AttributesEnum.EbsItemId.index();
    public static final int ITEMSTATUSFLAG =
        AttributesEnum.ItemStatusFlag.index();
    public static final int SEGMENT1 = AttributesEnum.Segment1.index();
    public static final int SEGMENT3 = AttributesEnum.Segment3.index();
    public static final int SEGMENT4 = AttributesEnum.Segment4.index();
    public static final int SEGMENT5 = AttributesEnum.Segment5.index();
    public static final int SEGMENT6 = AttributesEnum.Segment6.index();
    public static final int SEGMENT7 = AttributesEnum.Segment7.index();
    public static final int EPWRESULTANT = AttributesEnum.EPWResultant.index();
    public static final int WEAVERESULTANT =
        AttributesEnum.WeaveResultant.index();
    public static final int WARPROWCOUNT = AttributesEnum.WarpRowCount.index();
    public static final int WEFTROWCOUNT = AttributesEnum.WeftRowCount.index();
    public static final int ENDSPERWARPCOUNT =
        AttributesEnum.EndsPerWarpCount.index();
    public static final int PICKSPERWEFTCOUNT =
        AttributesEnum.PicksPerWeftCount.index();
    public static final int WARPGSM = AttributesEnum.WarpGSM.index();
    public static final int WEFTGSM = AttributesEnum.WeftGSM.index();
    public static final int FABRICGSM = AttributesEnum.FabricGSM.index();
    public static final int FABRICBLENDRESULTANT =
        AttributesEnum.FabricBlendResultant.index();
    public static final int WARPRESULTANTSUM =
        AttributesEnum.WarpResultantSum.index();
    public static final int WEFTRESULTANTSUM =
        AttributesEnum.WeftResultantSum.index();
    public static final int WARPCONTRACTION =
        AttributesEnum.WarpContraction.index();
    public static final int WEFTCONTRACTION =
        AttributesEnum.WeftContraction.index();
    public static final int ROWSTATUS = AttributesEnum.RowStatus.index();
    public static final int FOLDERCODE = AttributesEnum.FolderCode.index();
    public static final int SEGMENT3VALUE =
        AttributesEnum.Segment3Value.index();
    public static final int WVFABRICBLEND =
        AttributesEnum.WvFabricBlend.index();
    public static final int XXPMWARPVIEW = AttributesEnum.XxpmWarpView.index();
    public static final int XXPMWEFTVIEW = AttributesEnum.XxpmWeftView.index();
    public static final int XXPMATTACHMENTSVIEW =
        AttributesEnum.XxpmAttachmentsView.index();
    public static final int WVWEAVELOV = AttributesEnum.WvWeaveLov.index();
    public static final int WVDIRECTIONLOV =
        AttributesEnum.WvDirectionLov.index();
    public static final int WVDESIGNLOV = AttributesEnum.WvDesignLov.index();
    public static final int WVSIZELOV = AttributesEnum.WvSizeLov.index();
    public static final int WVINSERTIONLOV =
        AttributesEnum.WvInsertionLov.index();
    public static final int WVSELVEDGELOV =
        AttributesEnum.WvSelvedgeLov.index();
    public static final int ITEMSTATUSLOV =
        AttributesEnum.ItemStatusLov.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpmItemMasterWvViewRowImpl() {
    }

    /**
     * Gets XxpmItemMaster entity object.
     * @return the XxpmItemMaster
     */
    public XxpmItemMasterImpl getXxpmItemMaster() {
        return (XxpmItemMasterImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for IM_ID using the alias name ImId.
     * @return the IM_ID
     */
    public DBSequence getImId() {
        return (DBSequence)getAttributeInternal(IMID);
    }

    /**
     * Sets <code>value</code> as attribute value for IM_ID using the alias name ImId.
     * @param value value to set the IM_ID
     */
    public void setImId(DBSequence value) {
        setAttributeInternal(IMID, value);
    }

    /**
     * Gets the attribute value for SEGMENT2 using the alias name Segment2.
     * @return the SEGMENT2
     */
    public String getSegment2() {
        return (String)getAttributeInternal(SEGMENT2);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT2 using the alias name Segment2.
     * @param value value to set the SEGMENT2
     */
    public void setSegment2(String value) {
        setAttributeInternal(SEGMENT2, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ENDS using the alias name Ends.
     * @return the ENDS
     */
    public Number getEnds() {
        return (Number)getAttributeInternal(ENDS);
    }

    /**
     * Sets <code>value</code> as attribute value for ENDS using the alias name Ends.
     * @param value value to set the ENDS
     */
    public void setEnds(Number value) {
        setAttributeInternal(ENDS, value);
    }

    /**
     * Gets the attribute value for PICKS using the alias name Picks.
     * @return the PICKS
     */
    public Number getPicks() {
        return (Number)getAttributeInternal(PICKS);
    }

    /**
     * Sets <code>value</code> as attribute value for PICKS using the alias name Picks.
     * @param value value to set the PICKS
     */
    public void setPicks(Number value) {
        setAttributeInternal(PICKS, value);
    }

    /**
     * Gets the attribute value for WIDTH using the alias name Width.
     * @return the WIDTH
     */
    public Number getWidth() {
        return (Number)getAttributeInternal(WIDTH);
    }

    /**
     * Sets <code>value</code> as attribute value for WIDTH using the alias name Width.
     * @param value value to set the WIDTH
     */
    public void setWidth(Number value) {
        setAttributeInternal(WIDTH, value);
    }

    /**
     * Gets the attribute value for WEAVE using the alias name Weave.
     * @return the WEAVE
     */
    public String getWeave() {
        return (String)getAttributeInternal(WEAVE);
    }

    /**
     * Sets <code>value</code> as attribute value for WEAVE using the alias name Weave.
     * @param value value to set the WEAVE
     */
    public void setWeave(String value) {
        setAttributeInternal(WEAVE, value);
    }

    /**
     * Gets the attribute value for DIRECTION using the alias name Direction.
     * @return the DIRECTION
     */
    public String getDirection() {
        return (String)getAttributeInternal(DIRECTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DIRECTION using the alias name Direction.
     * @param value value to set the DIRECTION
     */
    public void setDirection(String value) {
        setAttributeInternal(DIRECTION, value);
    }

    /**
     * Gets the attribute value for DESIGN using the alias name Design.
     * @return the DESIGN
     */
    public String getDesign() {
        return (String)getAttributeInternal(DESIGN);
    }

    /**
     * Sets <code>value</code> as attribute value for DESIGN using the alias name Design.
     * @param value value to set the DESIGN
     */
    public void setDesign(String value) {
        setAttributeInternal(DESIGN, value);
    }

    /**
     * Gets the attribute value for WEAVE_SIZE using the alias name WeaveSize.
     * @return the WEAVE_SIZE
     */
    public String getWeaveSize() {
        return (String)getAttributeInternal(WEAVESIZE);
    }

    /**
     * Sets <code>value</code> as attribute value for WEAVE_SIZE using the alias name WeaveSize.
     * @param value value to set the WEAVE_SIZE
     */
    public void setWeaveSize(String value) {
        setAttributeInternal(WEAVESIZE, value);
    }

    /**
     * Gets the attribute value for INSERTION using the alias name Insertion.
     * @return the INSERTION
     */
    public String getInsertion() {
        return (String)getAttributeInternal(INSERTION);
    }

    /**
     * Sets <code>value</code> as attribute value for INSERTION using the alias name Insertion.
     * @param value value to set the INSERTION
     */
    public void setInsertion(String value) {
        setAttributeInternal(INSERTION, value);
    }

    /**
     * Gets the attribute value for SELVEDGE_TYPE using the alias name SelvedgeType.
     * @return the SELVEDGE_TYPE
     */
    public String getSelvedgeType() {
        return (String)getAttributeInternal(SELVEDGETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for SELVEDGE_TYPE using the alias name SelvedgeType.
     * @param value value to set the SELVEDGE_TYPE
     */
    public void setSelvedgeType(String value) {
        setAttributeInternal(SELVEDGETYPE, value);
    }

    /**
     * Gets the attribute value for FAB_BLEND_TYPE using the alias name FabBlendType.
     * @return the FAB_BLEND_TYPE
     */
    public String getFabBlendType() {
        return (String)getAttributeInternal(FABBLENDTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for FAB_BLEND_TYPE using the alias name FabBlendType.
     * @param value value to set the FAB_BLEND_TYPE
     */
    public void setFabBlendType(String value) {
        setAttributeInternal(FABBLENDTYPE, value);
    }

    /**
     * Gets the attribute value for EBS_ITEM_ID using the alias name EbsItemId.
     * @return the EBS_ITEM_ID
     */
    public Number getEbsItemId() {
        return (Number)getAttributeInternal(EBSITEMID);
    }

    /**
     * Sets <code>value</code> as attribute value for EBS_ITEM_ID using the alias name EbsItemId.
     * @param value value to set the EBS_ITEM_ID
     */
    public void setEbsItemId(Number value) {
        setAttributeInternal(EBSITEMID, value);
    }

    /**
     * Gets the attribute value for ITEM_STATUS_FLAG using the alias name ItemStatusFlag.
     * @return the ITEM_STATUS_FLAG
     */
    public Integer getItemStatusFlag() {
        return (Integer)getAttributeInternal(ITEMSTATUSFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for ITEM_STATUS_FLAG using the alias name ItemStatusFlag.
     * @param value value to set the ITEM_STATUS_FLAG
     */
    public void setItemStatusFlag(Integer value) {
        setAttributeInternal(ITEMSTATUSFLAG, value);
    }

    /**
     * Gets the attribute value for SEGMENT1 using the alias name Segment1.
     * @return the SEGMENT1
     */
    public String getSegment1() {
        return (String)getAttributeInternal(SEGMENT1);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT1 using the alias name Segment1.
     * @param value value to set the SEGMENT1
     */
    public void setSegment1(String value) {
        setAttributeInternal(SEGMENT1, value);
    }

    /**
     * Gets the attribute value for SEGMENT3 using the alias name Segment3.
     * @return the SEGMENT3
     */
    public String getSegment3() {
        return (String)getAttributeInternal(SEGMENT3);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT3 using the alias name Segment3.
     * @param value value to set the SEGMENT3
     */
    public void setSegment3(String value) {
        setAttributeInternal(SEGMENT3, value);
    }

    /**
     * Gets the attribute value for SEGMENT4 using the alias name Segment4.
     * @return the SEGMENT4
     */
    public String getSegment4() {
        return (String)getAttributeInternal(SEGMENT4);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT4 using the alias name Segment4.
     * @param value value to set the SEGMENT4
     */
    public void setSegment4(String value) {
        setAttributeInternal(SEGMENT4, value);
    }

    /**
     * Gets the attribute value for SEGMENT5 using the alias name Segment5.
     * @return the SEGMENT5
     */
    public String getSegment5() {
        return (String)getAttributeInternal(SEGMENT5);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT5 using the alias name Segment5.
     * @param value value to set the SEGMENT5
     */
    public void setSegment5(String value) {
        setAttributeInternal(SEGMENT5, value);
    }

    /**
     * Gets the attribute value for SEGMENT6 using the alias name Segment6.
     * @return the SEGMENT6
     */
    public String getSegment6() {
        return (String)getAttributeInternal(SEGMENT6);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT6 using the alias name Segment6.
     * @param value value to set the SEGMENT6
     */
    public void setSegment6(String value) {
        setAttributeInternal(SEGMENT6, value);
    }

    /**
     * Gets the attribute value for SEGMENT7 using the alias name Segment7.
     * @return the SEGMENT7
     */
    public String getSegment7() {
        return (String)getAttributeInternal(SEGMENT7);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT7 using the alias name Segment7.
     * @param value value to set the SEGMENT7
     */
    public void setSegment7(String value) {
        setAttributeInternal(SEGMENT7, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EPWResultant.
     * @return the EPWResultant
     */
    public String getEPWResultant() {
        return (String)getAttributeInternal(EPWRESULTANT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EPWResultant.
     * @param value value to set the  EPWResultant
     */
    public void setEPWResultant(String value) {
        setAttributeInternal(EPWRESULTANT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WeaveResultant.
     * @return the WeaveResultant
     */
    public String getWeaveResultant() {
        return (String)getAttributeInternal(WEAVERESULTANT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WeaveResultant.
     * @param value value to set the  WeaveResultant
     */
    public void setWeaveResultant(String value) {
        setAttributeInternal(WEAVERESULTANT, value);
    }


    /*
    public double NVL(Double input, double output) {
        if (input != null) {
            return input;
        } else {
            return output;
        }
    }
*/

    public Double getLcmRslt(RowIterator ri) {
        int rowCount = ri.getRowCount();
        Row curRow = null;
        double[] voRows = new double[ri.getRowCount()];
        int i = 0;
        double maxVal = 0;
        while (ri.hasNext()) {
            curRow = ri.next();
            if (rowCount > 1) {
                voRows[i] =
                        Math.round((Double)curRow.getAttribute("ConvertedYarnCount"));
            } else {
                voRows[i] = (Double)curRow.getAttribute("ConvertedYarnCount");
            }
            if (voRows[i] > maxVal) {
                maxVal = voRows[i];
            }
            i++;
        }
        double lcm = maxVal;
        Boolean lcmStatus = false;
        if (rowCount < 1)
            lcmStatus = true;
        while (lcmStatus == false) {
            logger.warning("lcm -----> " + lcm);
            for (int j = 0; j < voRows.length; j++) {
                if (lcm % voRows[j] == 0) {
                    lcmStatus = true;
                } else {
                    lcm = lcm + maxVal;
                    lcmStatus = false;
                    break;
                }
            }
        }
        double resultant = 0;
        for (int k = 0; k < voRows.length; k++) {
            resultant = lcm / voRows[k] + resultant;
        }

        if (i != 0 && resultant != 0) {
            resultant = lcm / resultant;
        } else {

        }

        return resultant;
    }

    public Double getPolyesterRatio(RowIterator ri) {
        Row curRow = null;
        int rowCount = ri.getRowCount();
        double ratioSum = 0;
        double avg = 0;
        while (ri.hasNext()) {
            curRow = ri.next();
            ratioSum +=
                    ((Number)curRow.getAttribute("FiberRatio")).doubleValue();
        }
        if (rowCount > 0)
            avg = ratioSum / rowCount;
        else
            avg = 0;
        return avg;
    }


    /**
     * Gets the attribute value for the calculated attribute WeftRowCount.
     * @return the WeftRowCount
     */
    public Integer getWeftRowCount() {
        return (Integer)getAttributeInternal(WEFTROWCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WeftRowCount.
     * @param value value to set the  WeftRowCount
     */
    public void setWeftRowCount(Integer value) {
        setAttributeInternal(WEFTROWCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EndsPerWarpCount.
     * @return the EndsPerWarpCount
     */
    public Double getEndsPerWarpCount() {
        return (Double)getAttributeInternal(ENDSPERWARPCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EndsPerWarpCount.
     * @param value value to set the  EndsPerWarpCount
     */
    public void setEndsPerWarpCount(Double value) {
        setAttributeInternal(ENDSPERWARPCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PicksPerWeftCount.
     * @return the PicksPerWeftCount
     */
    public Double getPicksPerWeftCount() {
        return (Double)getAttributeInternal(PICKSPERWEFTCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PicksPerWeftCount.
     * @param value value to set the  PicksPerWeftCount
     */
    public void setPicksPerWeftCount(Double value) {
        setAttributeInternal(PICKSPERWEFTCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WarpGSM.
     * @return the WarpGSM
     */
    public Double getWarpGSM() {
        return (Double)getAttributeInternal(WARPGSM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WarpGSM.
     * @param value value to set the  WarpGSM
     */
    public void setWarpGSM(Double value) {
        setAttributeInternal(WARPGSM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WeftGSM.
     * @return the WeftGSM
     */
    public Double getWeftGSM() {
        return (Double)getAttributeInternal(WEFTGSM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WeftGSM.
     * @param value value to set the  WeftGSM
     */
    public void setWeftGSM(Double value) {
        setAttributeInternal(WEFTGSM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FabricGSM.
     * @return the FabricGSM
     */
    public Double getFabricGSM() {
        return (Double)getAttributeInternal(FABRICGSM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FabricGSM.
     * @param value value to set the  FabricGSM
     */
    public void setFabricGSM(Double value) {
        setAttributeInternal(FABRICGSM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FabricBlendResultant.
     * @return the FabricBlendResultant
     */
    public String getFabricBlendResultant() {
        //return (String) getAttributeInternal(YARNBLENDRESULTANT);
        Row curRow = null;
        String result = "";
        String query = "";
        String warpId = "";
        String weftId = "";
        String warpGSM = "";
        String weftGSM = "";
        String fabricGSM = "";

        try {
            warpGSM = String.valueOf(this.getWarpGSM());
        } catch (NullPointerException e) {
        }
        try {
            weftGSM = String.valueOf(this.getWeftGSM());
        } catch (NullPointerException e) {
        }
        try {
            fabricGSM = String.valueOf(this.getFabricGSM());
        } catch (NullPointerException e) {
        }

        RowIterator warp = this.getXxpmWarpView();
        RowIterator weft = this.getXxpmWeftView();

        while (warp.hasNext()) {
            curRow = warp.next();
            try {
                warpId +=
                        "," + String.valueOf(curRow.getAttribute("BaseImId"));
            } catch (NullPointerException e) {
            }
        }

        while (weft.hasNext()) {
            curRow = weft.next();
            try {
                weftId +=
                        "," + String.valueOf(curRow.getAttribute("BaseImId"));
            } catch (NullPointerException e) {
            }
        }

        query =
                "BEGIN :RESULT := XXPM_YARN_BLEND_FORMULA_FUNC (:WARP_ID, :WEFT_ID, :WARP_ROWS, :WEFT_ROWS, :WARP_GSM, :WEFT_GSM, :FABRIC_GSM); END;";
        CallableStatement stmt =
            this.getDBTransaction().createCallableStatement(query, 0);
        try {
            stmt.registerOutParameter("RESULT", Types.VARCHAR);

            if (warpId.equals(null) || warpId.length() < 1) {
                warpId = ",0";
            }
            if (weftId.equals(null) || weftId.length() < 1) {
                weftId = ",0";
            }
            if (warpGSM.equals(null) || warpGSM.length() < 1) {
                warpGSM = "0";
            }
            if (weftGSM.equals(null) || weftGSM.length() < 1) {
                weftGSM = "0";
            }
            if (fabricGSM.equals(null) || fabricGSM.length() < 1) {
                fabricGSM = "0";
            }

            stmt.setString("WARP_ID", warpId);
            stmt.setString("WEFT_ID", weftId);
            stmt.setString("WARP_ROWS",
                           String.valueOf(this.getWarpRowCount()));
            stmt.setString("WEFT_ROWS",
                           String.valueOf(this.getWeftRowCount()));
            stmt.setString("WARP_GSM", warpGSM);
            stmt.setString("WEFT_GSM", weftGSM);
            stmt.setString("FABRIC_GSM", fabricGSM);
            logger.warning("WARP_ID ===== " + warpId);
            logger.warning("WEFT_ID ===== " + weftId);
            logger.warning("WARP_ROWS ===== " + this.getWarpRowCount());
            logger.warning("WEFT_ROWS ===== " + this.getWeftRowCount());
            logger.warning("WARP_GSM ===== " + warpGSM);
            logger.warning("WEFT_GSM ===== " + weftGSM);
            logger.warning("FABRIC_GSM ===== " + fabricGSM);
            stmt.execute();
            result = stmt.getString("RESULT");
            logger.warning("result ===== " + result);
        } catch (Exception e) {
            logger.warning("result ===== error");
            e.printStackTrace();
        } finally {
            try {
                stmt.close();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        if ((warp.getRowCount() < 1 && weft.getRowCount() < 1) ||
            (result.equalsIgnoreCase("ZERO DIVIDE ERROR")) ||
            result.equalsIgnoreCase("OTHER ERROR")) {
            result = "";
        }
        /* else if (result.equalsIgnoreCase("ZERO DIVIDE ERROR")) {
            result = "";
        } */
        return result;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FabricBlendResultant.
     * @param value value to set the  FabricBlendResultant
     */
    public void setFabricBlendResultant(String value) {
        setAttributeInternal(FABRICBLENDRESULTANT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WarpResultantSum.
     * @return the WarpResultantSum
     */
    public String getWarpResultantSum() {
        //return (String) getAttributeInternal(WARPRESULTANTSUM);
        String result = "";
        RowIterator ri = getXxpmWarpView();
        ArrayList<String> warpArray = new ArrayList<String>();
        Row row = null;
        int i = 0;
        while (ri.hasNext()) {
            row = ri.next();
            if (ri.getRowCount() > 1 || getXxpmWeftView().getRowCount() > 1) {
                warpArray.add(i,
                              (row.getAttribute("YarnCount") != null ? row.getAttribute("YarnCount") :
                               "") +
                              (row.getAttribute("YarnCount") != null && row.getAttribute("YarnPlies") !=
                               null ? "/" : "") +
                              (row.getAttribute("YarnPlies") != null ?
                               row.getAttribute("YarnPlies") : "") + "+");
            } else {
                warpArray.add(i,
                              (String)row.getAttribute("WarpResultant") + "+");
            }
            i++;
        }
        Collections.sort(warpArray);
        for (int j = 0; j < warpArray.size(); j++) {
            result += warpArray.get(j);
        }
        if (result != null && result.length() > 1) {
            result = result.substring(0, result.length() - 1);
        }
        //        logger.warning("Total rows in XxpmWarpView are: " +
        //                           ri.getRowCount());
        return result;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WarpResultantSum.
     * @param value value to set the  WarpResultantSum
     */
    public void setWarpResultantSum(String value) {
        setAttributeInternal(WARPRESULTANTSUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WeftResultantSum.
     * @return the WeftResultantSum
     */
    public String getWeftResultantSum() {
        //return (String) getAttributeInternal(WEFTRESULTANTSUM);
        String result = "";
        RowIterator ri = getXxpmWeftView();
        ArrayList<String> weftArray = new ArrayList<String>();
        Row row = null;
        int i = 0;
        while (ri.hasNext()) {
            row = ri.next();
            if (ri.getRowCount() > 1 || getXxpmWeftView().getRowCount() > 1)
                weftArray.add(i,
                              (row.getAttribute("YarnCount") != null ? row.getAttribute("YarnCount") :
                               "") +
                              (row.getAttribute("YarnCount") != null && row.getAttribute("YarnPlies") !=
                               null ? "/" : "") +
                              (row.getAttribute("YarnPlies") != null ?
                               row.getAttribute("YarnPlies") : "") + "+");
            else
                weftArray.add(i,
                              (String)row.getAttribute("WeftResultant") + "+");
            i++;
        }
        Collections.sort(weftArray);
        for (int j = 0; j < weftArray.size(); j++) {
            result += weftArray.get(j);
        }
        if (result != null && result.length() > 1) {
            result = result.substring(0, result.length() - 1);
        }
        //        logger.warning("Total rows in XxpmWeftView are: " +
        //                           ri.getRowCount());
        return result;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WeftResultantSum.
     * @param value value to set the  WeftResultantSum
     */
    public void setWeftResultantSum(String value) {
        setAttributeInternal(WEFTRESULTANTSUM, value);
    }

    /**
     * Gets the attribute value for WARP_CONTRACTION using the alias name WarpContraction.
     * @return the WARP_CONTRACTION
     */
    public Number getWarpContraction() {
        return (Number)getAttributeInternal(WARPCONTRACTION);
    }

    /**
     * Sets <code>value</code> as attribute value for WARP_CONTRACTION using the alias name WarpContraction.
     * @param value value to set the WARP_CONTRACTION
     */
    public void setWarpContraction(Number value) {
        setAttributeInternal(WARPCONTRACTION, value);
    }

    /**
     * Gets the attribute value for WEFT_CONTRACTION using the alias name WeftContraction.
     * @return the WEFT_CONTRACTION
     */
    public Number getWeftContraction() {
        return (Number)getAttributeInternal(WEFTCONTRACTION);
    }

    /**
     * Sets <code>value</code> as attribute value for WEFT_CONTRACTION using the alias name WeftContraction.
     * @param value value to set the WEFT_CONTRACTION
     */
    public void setWeftContraction(Number value) {
        setAttributeInternal(WEFTCONTRACTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RowStatus.
     * @return the RowStatus
     */
    public Integer getRowStatus() {
        //return (Integer) getAttributeInternal(ROWSTATUS);
        byte entityState = this.getEntity(0).getEntityState();
        return new Integer(entityState);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RowStatus.
     * @param value value to set the  RowStatus
     */
    public void setRowStatus(Integer value) {
        setAttributeInternal(ROWSTATUS, value);
    }

    /**
     * Gets the attribute value for FOLDER_CODE using the alias name FolderCode.
     * @return the FOLDER_CODE
     */
    public Integer getFolderCode() {
        return (Integer)getAttributeInternal(FOLDERCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for FOLDER_CODE using the alias name FolderCode.
     * @param value value to set the FOLDER_CODE
     */
    public void setFolderCode(Integer value) {
        setAttributeInternal(FOLDERCODE, value);
    }


    /**
     * Gets the attribute value for SEGMENT3VALUE using the alias name Segment3Value.
     * @return the SEGMENT3VALUE
     */
    public String getSegment3Value() {
        return (String)getAttributeInternal(SEGMENT3VALUE);
    }

    /**
     * Sets <code>value</code> as attribute value for SEGMENT3VALUE using the alias name Segment3Value.
     * @param value value to set the SEGMENT3VALUE
     */
    public void setSegment3Value(String value) {
        setAttributeInternal(SEGMENT3VALUE, value);
    }

    /**
     * Gets the attribute value for WV_FABRIC_BLEND using the alias name WvFabricBlend.
     * @return the WV_FABRIC_BLEND
     */
    public String getWvFabricBlend() {
        return (String)getAttributeInternal(WVFABRICBLEND);
    }

    /**
     * Sets <code>value</code> as attribute value for WV_FABRIC_BLEND using the alias name WvFabricBlend.
     * @param value value to set the WV_FABRIC_BLEND
     */
    public void setWvFabricBlend(String value) {
        setAttributeInternal(WVFABRICBLEND, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WarpRowCount.
     * @return the WarpRowCount
     */
    public Integer getWarpRowCount() {
        return (Integer)getAttributeInternal(WARPROWCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WarpRowCount.
     * @param value value to set the  WarpRowCount
     */
    public void setWarpRowCount(Integer value) {
        setAttributeInternal(WARPROWCOUNT, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link XxpmWarpView.
     */
    public RowIterator getXxpmWarpView() {
        return (RowIterator)getAttributeInternal(XXPMWARPVIEW);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link XxpmWeftView.
     */
    public RowIterator getXxpmWeftView() {
        return (RowIterator)getAttributeInternal(XXPMWEFTVIEW);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link XxpmAttachmentsView.
     */
    public RowIterator getXxpmAttachmentsView() {
        return (RowIterator)getAttributeInternal(XXPMATTACHMENTSVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WvWeaveLov.
     */
    public RowSet getWvWeaveLov() {
        return (RowSet)getAttributeInternal(WVWEAVELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WvDirectionLov.
     */
    public RowSet getWvDirectionLov() {
        return (RowSet)getAttributeInternal(WVDIRECTIONLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WvDesignLov.
     */
    public RowSet getWvDesignLov() {
        return (RowSet)getAttributeInternal(WVDESIGNLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WvSizeLov.
     */
    public RowSet getWvSizeLov() {
        return (RowSet)getAttributeInternal(WVSIZELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WvInsertionLov.
     */
    public RowSet getWvInsertionLov() {
        return (RowSet)getAttributeInternal(WVINSERTIONLOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> WvSelvedgeLov.
     */
    public RowSet getWvSelvedgeLov() {
        return (RowSet)getAttributeInternal(WVSELVEDGELOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemStatusLov.
     */
    public RowSet getItemStatusLov() {
        return (RowSet)getAttributeInternal(ITEMSTATUSLOV);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    @Override
    public void setNewRowState(byte state) {
        if (state != Row.STATUS_INITIALIZED ||
            getNewRowState() != Row.STATUS_NEW) {
            super.setNewRowState(state);
        }
    }

    public void updateWvLovsAccessor() {
        this.getWvWeaveLov().executeQuery();
        this.getWvDirectionLov().executeQuery();
        this.getWvDesignLov().executeQuery();
        this.getWvSizeLov().executeQuery();
        this.getWvInsertionLov().executeQuery();
        this.getWvSelvedgeLov().executeQuery();
    }
}
